#!/usr/bin/env lua

local jsonc     = require("luci.jsonc")

--[[
 In ubus server scripts written in Lua, you must not define global functions.
 Doing so may significantly increase the time it takes for the rpcd module to load the script.
 Similarly, be cautious when using the require function to import libraries.
 Depending on the library, it may also affect the loading time of rpcd.
 To avoid this, make sure to call require inside the call field of each method within the methods table. 
]]

local methods = {

    auto_set = {
        args = { id = "a_string" },

        call = function(args)
            local uci       = require("luci.model.uci").cursor()
            local datactrl  = require("oasis.chat.datactrl")
            local misc      = require("oasis.chat.misc")
            local common    = require("oasis.common")
            local transfer  = require("oasis.chat.transfer")
            local debug     = require("oasis.chat.debug")

            debug:log("oasis.log", "auto_set", "\n--- [oasis.title][auto_set] ---")
            local r = {}
            local cfg = datactrl.get_ai_service_cfg(nil, {with_storage = true})
            local file_name = cfg.prefix .. args.id
            local file_path = misc.normalize_path(cfg.path) .. file_name

            debug:log("oasis.log", "auto_set", "file path = " .. file_path)

            local service = common.select_service_obj()

            if not service then
                debug:log("oasis.log", "auto_set", "No Service ...")
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            service:initialize(nil, common.ai.format.title)

            debug:log("oasis.log", "auto_set", "file name = " .. file_name)
            local is_search = common.search_chat_id(args.id)

            if not is_search then
                debug:log("oasis.log", "auto_set", "Not Found ...")
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            local load_chat_data = function(path)

                debug:log("oasis.log", "\n--- [oasis.title][load_chat_data] ---")
                debug:log("oasis.log", "file path = " .. path)

                local file = io.open(path, "r")

                if not file then
                    return ""
                end

                local chat_data = file:read("*a")
                file:close()

                debug:log("oasis.log", "auto_set", chat_data)

                return jsonc.parse(chat_data)
            end

            local chat = load_chat_data(file_path)
            chat.model = uci:get_first(common.db.uci.cfg, common.db.uci.sect.service, "model")

            local _, title = transfer.chat_with_ai(service, chat)

            if (not title) or (#title == 0) then
                debug:log("oasis.log", "auto_set", "No title ...")
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            local save_chat_title = function(id, t)

                local unnamed_section = common.get_target_id_section(id)

                if #unnamed_section == 0 then
                    return false
                end

                uci:set(common.db.uci.cfg, unnamed_section, "title", t)
                uci:commit(common.db.uci.cfg)

                return true
            end

            local is_set = save_chat_title(args.id, title)

            if not is_set then
                debug:log("oasis.log", "auto_set", "Failed to save chat data ...")
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            debug:log("oasis.log", "auto_set", "title = " .. title)

            r.result = jsonc.stringify({ status = common.status.ok, title = title })
            return r
        end
    },

    manual_set = {
        args = { id = "a_string", title = "a_string" },

        call = function(args)
            local uci       = require("luci.model.uci").cursor()
            local common    = require("oasis.common")

            local r = {}
            local is_set = false

            local save_chat_title = function(id, title)

                local unnamed_section = common.get_target_id_section(id)

                if #unnamed_section == 0 then
                    return false
                end

                uci:set(common.db.uci.cfg, unnamed_section, "title", title)
                uci:commit(common.db.uci.cfg)

                return true
            end

            if #args.title ~= 0 then
                is_set = save_chat_title(args.id, args.title)
            end

            if not is_set then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            r.result = jsonc.stringify({ status = common.status.ok, title = args.title })
            return r
        end
    },
}

local function parseInput()

    local parse = jsonc.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(jsonc.stringify({
            error = err or "Incomplete input for argument parsing"
        }))
        os.exit(1)
    end

    return parse:get()
end

-- validation
local function validateArgs(func, uargs)

    local method = methods[func]
    if not method then
        print(jsonc.stringify({error = "Method not found in methods table"}))
        os.exit(1)
    end

    local n = 0
    for _, _ in pairs(uargs) do n = n + 1 end

    if method.args and n == 0 then
        print(jsonc.stringify({
            error = "Received empty arguments for " .. func ..
                " but it requires " .. jsonc.stringify(method.args)
        }))
        os.exit(1)
    end

    uargs.ubus_rpc_session = nil

    local margs = method.args or {}
    for k, v in pairs(uargs) do
        if margs[k] == nil or (v ~= nil and type(v) ~= type(margs[k])) then
            print(jsonc.stringify({
                error = "Invalid argument '" .. k .. "' for " .. func ..
                    " it requires " .. jsonc.stringify(method.args)
            }))
            os.exit(1)
        end
    end

    return method
end

-- ubus list & call
if arg[1] == "list" then
    local _, rv = nil, {}
    for _, method in pairs(methods) do rv[_] = method.args or {} end
    print((jsonc.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
    local args = parseInput()
    local method = validateArgs(arg[2], args)
    local run = method.call(args)
    print(run.result)
    os.exit(run.code or 0)
end