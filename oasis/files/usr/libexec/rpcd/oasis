#!/usr/bin/env lua

local jsonc = require("luci.jsonc")

--[[
 In ubus server scripts written in Lua, you must not define global functions.
 Doing so may significantly increase the time it takes for the rpcd module to load the script.
 Similarly, be cautious when using the require function to import libraries.
 Depending on the library, it may also affect the loading time of rpcd.
 To avoid this, make sure to call require inside the call field of each method within the methods table.
]]

local methods = {

    config = {
        call = function()
            local oasis_ubus = require("oasis.ubus.util")
            local r = {}
            r.result = oasis_ubus.retrieve_config()
            return r
        end
    },

    load_icon_info = {

        call = function()
            local oasis_ubus = require("oasis.ubus.util")
            local r = {}
            r.result = oasis_ubus.retrieve_icon_info("/etc/oasis/oasis.conf", "json")
            return r
        end
    },

    select_icon = {
        args = { using = "a_string" },

        call = function(args)
            local common = require("oasis.common")
            local r = {}

            local data = common.load_conf_file("/etc/oasis/oasis.conf")

            if not data then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            data.icons.using = args.using

            local is_update = common.update_conf_file("/etc/oasis/oasis.conf", data)

            if not is_update then
                r.result = jsonc.stringify({ status = common.status.error })
            end

            r.result = jsonc.stringify({ status = common.status.ok })
            return r
        end
    },

    delete_icon = {
        args = { target = "a_string"},

        call = function(args)
            local common = require("oasis.common")
            local r = {}

            local data = common.load_conf_file("/etc/oasis/oasis.conf")

            if not data then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            -- Delete file by filename, not by key
            local filename = data.icons and data.icons[args.target]

            if filename and #filename > 0 then
                os.remove(data.icons.path .. filename)
            end

            if data.icons then
                data.icons[args.target] = nil

                -- If the deleted key was selected, choose a fallback icon key
                if data.icons.using == args.target then
                    local fallback = ""
                    for k, v in pairs(data.icons) do
                        if type(k) == "string" and k:match("^icon_%d+$") and type(v) == "string" and #v > 0 then
                            fallback = k
                            break
                        end
                    end
                    data.icons.using = fallback
                end
            end

            local is_update = common.update_conf_file("/etc/oasis/oasis.conf", data)

            if not is_update then
                r.result = jsonc.stringify({ status = common.status.error })
            end

            r.result = jsonc.stringify({ status = common.status.ok })
            return r
        end
    },

    load_sysmsg_data = {

        call = function()
            local oasis_ubus = require("oasis.ubus.util")
            local r = {}
            r.result = oasis_ubus.retrieve_sysmsg("/etc/oasis/oasis.conf", "json")
            return r
        end
    },

    load_sysmsg_list = {

        call = function()
            local oasis_ubus = require("oasis.ubus.util")
            local r = {}
            r.result = oasis_ubus.retrieve_sysmsg_info("/etc/oasis/oasis.conf", "json")
            return r
        end
    },

    add_sysmsg_data = {
        args = { title = "a_string", message = "a_string"},

        call = function(args)
            local common = require("oasis.common")
            local r = {}

            local data = common.load_conf_file("/etc/oasis/oasis.conf")

            local max_suffix = 0
            for sysmsg_key, _ in pairs(data) do
                local suffix = tonumber(sysmsg_key:match("custom_(%d+)"))
                if suffix and (suffix > max_suffix) then
                    max_suffix = suffix
                end
            end

            local new_sysmsg_key = "custom_" .. (max_suffix + 1)

            data[new_sysmsg_key] = {}
            data[new_sysmsg_key].title = args.title
            data[new_sysmsg_key].chat = args.message

            local is_update = common.update_conf_file("/etc/oasis/oasis.conf", data)

            if not is_update then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            r.result = jsonc.stringify({ status = common.status.ok, new_sysmsg_key = new_sysmsg_key })
            return r
        end
    },

    update_sysmsg_data = {
        args = { target = "a_string", title = "a_string", message = "a_string"},

        call = function(args)
            local common = require("oasis.common")
            local r = {}

            local data = common.load_conf_file("/etc/oasis/oasis.conf")

            if not data then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            data[args.target] = {}
            data[args.target].title = args.title
            data[args.target].chat = args.message

            local is_update = common.update_conf_file("/etc/oasis/oasis.conf", data)

            if not is_update then
                r.result = jsonc.stringify({ status = common.status.error })
            end

            r.result = jsonc.stringify({ status = common.status.ok })

            return r
        end
    },

    delete_sysmsg_data = {
        args = { target = "a_string" },

        call = function(args)
            local common = require("oasis.common")
            local r = {}

            local data = common.load_conf_file("/etc/oasis/oasis.conf")

            if not data then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            data[args.target] = nil

            local is_update = common.update_conf_file("/etc/oasis/oasis.conf", data)

            if not is_update then
                r.result = jsonc.stringify({ status = common.status.error })
            end

            r.result = jsonc.stringify({ status = common.status.ok })

            return r
        end
    },

    -- confirm temporary setting
    confirm = {
        call = function()
            local uci = require("luci.model.uci").cursor()
            local common = require("oasis.common")
            local r = {}
            local is_rollback_confirm = uci:get_bool(common.db.uci.cfg, common.db.uci.sect.rollback, "confirm")

            if not is_rollback_confirm then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            local file = io.open(common.rollback.dir .. common.rollback.uci_cmd_json, "r")
            local uci_list_json = file:read("*a")
            file:close()

            if not uci_list_json then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            r.result = jsonc.stringify({ status = common.status.ok, uci_list = uci_list_json})
            return r
        end
    },

    select_ai_service = {
        args = { id = "a_string", name = "a_string", model = "a_string"},

        call = function(args)
            local uci = require("luci.model.uci").cursor()
            local common = require("oasis.common")
            local r = {}
            local target_uid = ""
            local data = uci:get_all(common.db.uci.cfg);

            if not data then
                r.result = jsonc.stringify({error = "Failed to load config"})
                return r
            end

            for _, tbl in pairs(data) do
                for key, value in pairs(tbl) do
                    if (key == ".type") and (value == "service") then
                        local uid = tbl[".name"]
                        if (data[uid].identifier == args.id) and (data[uid].name == args.name) and (data[uid].model == args.model) then
                            target_uid = uid
                            break
                        end
                    end
                end

                if target_uid ~= "" then
                    break
                end
            end

            if target_uid == "" then
                r.result = jsonc.stringify({error = "Not Found"})
                return r
            end

            uci:reorder(common.db.uci.cfg, target_uid, 1)
            uci:commit(common.db.uci.cfg)

            r.result = jsonc.stringify({status = "OK"})
            return r
        end
    },

    analize = {
        args = { message = "a_string"},

        call = function(args)
            local uci = require("luci.model.uci").cursor()
            local oasis_ubus = require("oasis.ubus.util")
            local common = require("oasis.common")
            local r = {}

            local enable = uci:get_bool(common.db.uci.cfg, common.db.uci.sect.rpc, "enable")

            if not enable then
                r.result = jsonc.stringify({ status = common.status.error, desc = "Oasis's RPC function is not enabled." })
                return r
            end

            r.result = oasis_ubus.parse_uci_cmd_sequence(args.message, "json")

            return r
        end
    },

    base_info = {
        call = function()
            local uci = require("luci.model.uci").cursor()
            local oasis_ubus = require("oasis.ubus.util")
            local common = require("oasis.common")
            local r = {}

            local enable = uci:get_bool(common.db.uci.cfg, common.db.uci.sect.rpc, "enable")

            if not enable then
                r.result = jsonc.stringify({ status = common.status.error, desc = "Oasis's RPC function is not enabled." })
                return r
            end

            local is_service = uci:get_first(common.db.uci.cfg, common.db.uci.sect.service, "identifier", nil)

            if not is_service then
                r.result = jsonc.stringify({ status = common.status.error, desc = "No AI Service ..." })
                return r
            end

            local info_tbl = {}
            info_tbl.icon = oasis_ubus.retrieve_icon_info("/etc/oasis/oasis.conf", "table")
            info_tbl.sysmsg = oasis_ubus.retrieve_sysmsg_info("/etc/oasis/oasis.conf", "table")
            info_tbl.chat = oasis_ubus.retrieve_chat_info("table")
            info_tbl.service = oasis_ubus.retrieve_service_info("table")
            info_tbl.configs = oasis_ubus.retrieve_uci_config("table")
            r.result = jsonc.stringify(info_tbl)
            return r
        end
    }
}

local function parseInput()

    local parse = jsonc.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(jsonc.stringify({
            error = err or "Incomplete input for argument parsing"
        }))
        os.exit(1)
    end

    return parse:get()
end

-- validation
local function validateArgs(func, uargs)

    local method = methods[func]
    if not method then
        print(jsonc.stringify({error = "Method not found in methods table"}))
        os.exit(1)
    end

    local n = 0
    for _, _ in pairs(uargs) do n = n + 1 end

    if method.args and n == 0 then
        print(jsonc.stringify({
            error = "Received empty arguments for " .. func ..
                " but it requires " .. jsonc.stringify(method.args)
        }))
        os.exit(1)
    end

    uargs.ubus_rpc_session = nil

    local margs = method.args or {}
    for k, v in pairs(uargs) do
        if margs[k] == nil or (v ~= nil and type(v) ~= type(margs[k])) then
            print(jsonc.stringify({
                error = "Invalid argument '" .. k .. "' for " .. func ..
                    " it requires " .. jsonc.stringify(method.args)
            }))
            os.exit(1)
        end
    end

    return method
end

-- ubus list & call
if arg[1] == "list" then
    local _, rv = nil, {}
    for _, method in pairs(methods) do rv[_] = method.args or {} end
    print((jsonc.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
    local args = parseInput()
    local method = validateArgs(arg[2], args)
    local run = method.call(args)
    print(run.result)
    os.exit(run.code or 0)
end
