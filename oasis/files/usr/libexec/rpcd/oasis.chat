#!/usr/bin/env lua

local jsonc         = require("luci.jsonc")
-- local debug     = require("oasis.chat.debug")

--[[
 In ubus server scripts written in Lua, you must not define global functions.
 Doing so may significantly increase the time it takes for the rpcd module to load the script.
 Similarly, be cautious when using the require function to import libraries.
 Depending on the library, it may also affect the loading time of rpcd.
 To avoid this, make sure to call require inside the call field of each method within the methods table. 
]]

local methods = {

    list = {
        call = function()
            local oasis_ubus    = require("oasis.ubus.util")

            local r = {}
            r.result = oasis_ubus.retrieve_chat_info("json")
            return r
        end
    },

    send = {
        args = { id = "a_string", sysmsg_key = "a_string", message = "a_string" },

        call = function(args)
            local uci           = require("luci.model.uci").cursor()
            local oasis_ubus    = require("oasis.ubus.util")
            local common        = require("oasis.common")
            local util          = require("luci.util")
            -- debug:log("oasis.log", "send", "\n--- [oasis.chat][send] ---")

            local r = {}

            if (not args.id) or (not args.message) or (#args.message == 0)  then
                r.result = jsonc.stringify({ status = common.status.error })
            end

            local is_service = uci:get_first(common.db.uci.cfg, common.db.uci.sect.service, "identifier", nil)

            if not is_service then
                r.result = jsonc.stringify({ status = "No AI Service ..." })
                return r
            end

            -- Per-chat turn limit (count user messages in saved chat)
            local function is_chat_turns_exceeded(id)
                local max = tonumber(uci:get(common.db.uci.cfg, common.db.uci.sect.storage, "chat_max") or "0") or 0
                if max <= 0 then return false end

                if not id or (#id == 0) then return false end

                local loaded = util.ubus("oasis.chat", "load", { id = id }) or {}
                local cnt = 0
                if loaded and loaded.messages then
                    for _, m in ipairs(loaded.messages) do
                        if m.role == common.role.user then cnt = cnt + 1 end
                    end
                end
                return cnt >= max
            end

            if args.id and (#args.id > 0) then
                if is_chat_turns_exceeded(args.id) then
                    r.result = jsonc.stringify({ status = common.status.error, desc = "Maximum chat turns reached for this chat" })
                    return r
                end
            end

            local oasis = require("oasis.chat.main")

            local response, new_chat_info, plain_text_ai_message, reboot = oasis.rpc_output(
                                {   id          = args.id,
                                    sysmsg_key  = args.sysmsg_key,
                                    message     = args.message,
                                    cmd         = "chat" 
                                })

            -- debug:dump("oasis.log", response)

            if response.status ~= common.status.ok then
                r.result = jsonc.stringify(response)
                return r
            end

            local uci_parse_tbl = oasis_ubus.parse_uci_cmd_sequence(plain_text_ai_message, "table")

            if not new_chat_info then
                r.result = jsonc.stringify({ content = plain_text_ai_message, uci_parse_tbl = uci_parse_tbl, reboot = reboot})
                return r
            end

            local new_chat_tbl = jsonc.parse(new_chat_info)

            -- debug:dump("oasis.log", new_chat_tbl)
            -- debug:log("oasis.log", "send", plain_text_ai_message)

            r.result = jsonc.stringify({content         = plain_text_ai_message,
                                        id              = new_chat_tbl.id, 
                                        title           = new_chat_tbl.title, 
                                        uci_parse_tbl   = uci_parse_tbl,
                                        reboot          = reboot })

            return r
        end
    },

    load = {
        args = { id = "a_string" },

        call = function(args)
            local datactrl      = require("oasis.chat.datactrl")
            local misc          = require("oasis.chat.misc")
            local common        = require("oasis.common")
            -- debug:log("oasis.log", "load", "\n--- [oasis.chat][load] ---")

            local r = {}
            local conf = datactrl.get_ai_service_cfg(nil, {with_storage = true})
            local file_name = conf.prefix .. args.id
            local is_search = common.search_chat_id(args.id)

            if not is_search then
                -- debug:log("oasis.log", common.status.not_found)
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            local full_file_path = misc.normalize_path(conf.path) .. file_name

            local read_chat_data = function(file_path)

                -- debug:log("oasis.log", "load", "\n--- [oasis.chat][read_chat_data] ---")
                -- debug:log("oasis.log", "load", "file path = " .. file_path)

                local file = io.open(file_path, "r")

                if not file then
                    return ""
                end

                local chat_data = file:read("*a")
                file:close()

                -- debug:log("oasis.log", "load", "chat data = " .. chat_data)

                return chat_data
            end

            local chat_data = read_chat_data(full_file_path)

            if #chat_data == 0 then
                -- debug:log("oasis.log", common.status.error)
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            r.result = chat_data

            return r
        end
    },

    create = {
        args = { role1 = "a_string", content1 = "a_string", role2 = "a_string", content2 = "a_string", role3 = "a_string", content3 = "a_string" },

        call = function(args)
            local uci           = require("luci.model.uci").cursor()
            local datactrl      = require("oasis.chat.datactrl")
            local misc          = require("oasis.chat.misc")
            local common        = require("oasis.common")
            -- debug:log("oasis.log", "\n--- [oasis.chat][create] ---")
            
            local r = {}

            local id = common.generate_chat_id()

            if #id == 0 then
                -- debug:log("oasis.log", "status = " .. common.status.error)
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            local conf = datactrl.get_ai_service_cfg(nil, {with_storage = true})
            -- debug:log("oasis.log", "config path = " .. conf.path)
            local file_name = conf.prefix .. id
            -- debug:log("oasis.log", "file name = " .. file_name)
            local full_file_path = misc.normalize_path(conf.path) .. file_name
            -- debug:log("oasis.log", "full file path = " .. full_file_path)
            misc.touch(full_file_path)

            local chat_json_tbl = {}
            chat_json_tbl.messages = {}
            chat_json_tbl.messages[#chat_json_tbl.messages + 1] = {role = args.role1, content = args.content1}
            chat_json_tbl.messages[#chat_json_tbl.messages + 1] = {role = args.role2, content = args.content2}
            chat_json_tbl.messages[#chat_json_tbl.messages + 1] = {role = args.role3, content = args.content3}

            local chat_json_str = jsonc.stringify(chat_json_tbl, false)

            local write_chat_data = function(file_path, str)

                local file = io.open(file_path, "w")

                if not file then
                    return false
                end

                file:write(str)
                file:close()

                return true
            end

            write_chat_data(full_file_path, chat_json_str)

            local unnamed_section = uci:add(common.db.uci.cfg, common.db.uci.sect.chat)

            uci:set(common.db.uci.cfg, unnamed_section, "id", id)
            uci:commit(common.db.uci.cfg)

            r.result = jsonc.stringify({ status = common.status.ok , id = id})
            return r
        end
    },

    append = {
        args = {
            id = "a_string",
            role1 = "a_string", content1 = "a_string",
            role2 = "a_string", content2 = "a_string"
        },

        call = function(args)
            local datactrl      = require("oasis.chat.datactrl")
            local misc          = require("oasis.chat.misc")
            local common        = require("oasis.common")

            -- debug:log("oasis.log", "\n--- [oasis.chat][append] ---")
            local r = {}
            local is_same_id = common.search_chat_id(args.id)

            if not is_same_id then
                -- debug:log("oasis.log", common.status.not_found)
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            local conf = datactrl.get_ai_service_cfg(nil, {with_storage = true})
            local file_name = conf.prefix .. args.id
            local full_file_path = misc.normalize_path(conf.path) .. file_name

            -- debug:log("oasis.log", "file path = " .. full_file_path)

            local file = io.open(full_file_path, "r")

            if not file then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            local chat_data = file:read("*a")
            file:close()

            -- debug:log("oasis.log", "chat data = " .. chat_data)

            local chat_data_tbl = jsonc.parse(chat_data)
            chat_data_tbl.messages[#chat_data_tbl.messages + 1] = {role = args.role1, content = args.content1}
            chat_data_tbl.messages[#chat_data_tbl.messages + 1] = {role = args.role2, content = args.content2}

            local added_chat_data = jsonc.stringify(chat_data_tbl, false)

            -- debug:log("oasis.log", "Added chat data = " .. added_chat_data)

            file = io.open(full_file_path, "w")

            if not file then
                -- debug:log("oasis.log", common.status.error)
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            file:write(added_chat_data)
            file:close()

            r.result = jsonc.stringify({ status = common.status.ok })
            return r
        end
    },

    delete = {
        args = { id = "a_string" },

        call = function(args)
            local uci           = require("luci.model.uci").cursor()
            local datactrl      = require("oasis.chat.datactrl")
            local misc          = require("oasis.chat.misc")
            local common        = require("oasis.common")

            -- debug:log("oasis.log", "\n--- [oasis.chat][delete] ---")

            local r = {}
            local unnamed_section = ""

            uci:foreach(common.db.uci.cfg, common.db.uci.sect.chat, function(info)
                if args.id == info.id then
                    unnamed_section = info[".name"]
                end
            end)

            if #unnamed_section == 0 then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            local conf = datactrl.get_ai_service_cfg(nil, {with_storage = true})
            local file_name = conf.prefix .. args.id
            local full_file_path = misc.normalize_path(conf.path) .. file_name
            local result = os.remove(full_file_path)

            -- debug:log("oasis.log", "file path = " .. full_file_path)

            if not result then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            uci:delete(common.db.uci.cfg, unnamed_section)
            uci:commit(common.db.uci.cfg)

            r.result = jsonc.stringify({ status = common.status.ok })
            return r
        end
    },
}

local function parseInput()

    local parse = jsonc.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(jsonc.stringify({
            error = err or "Incomplete input for argument parsing"
        }))
        os.exit(1)
    end

    return parse:get()
end

-- validation
local function validateArgs(func, uargs)

    local method = methods[func]
    if not method then
        print(jsonc.stringify({error = "Method not found in methods table"}))
        os.exit(1)
    end

    local n = 0
    for _, _ in pairs(uargs) do n = n + 1 end

    if method.args and n == 0 then
        print(jsonc.stringify({
            error = "Received empty arguments for " .. func ..
                " but it requires " .. jsonc.stringify(method.args)
        }))
        os.exit(1)
    end

    uargs.ubus_rpc_session = nil

    local margs = method.args or {}
    for k, v in pairs(uargs) do
        if margs[k] == nil or (v ~= nil and type(v) ~= type(margs[k])) then
            print(jsonc.stringify({
                error = "Invalid argument '" .. k .. "' for " .. func ..
                    " it requires " .. jsonc.stringify(method.args)
            }))
            os.exit(1)
        end
    end

    return method
end

-- ubus list & call
if arg[1] == "list" then
    local _, rv = nil, {}
    for _, method in pairs(methods) do rv[_] = method.args or {} end
    print((jsonc.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
    local args = parseInput()
    local method = validateArgs(arg[2], args)
    local run = method.call(args)
    print(run.result)
    os.exit(run.code or 0)
end
