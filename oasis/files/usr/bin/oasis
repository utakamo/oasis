#!/usr/bin/env lua

local common = require("oasis.common")

if common.check_unloaded_plugin("oasis") then
    print("\27[31mOasis has been installed. A reboot of OpenWrt is required to use it.\27[0m")
    print()
    return
end

if common.check_unloaded_plugin("oasis-mod-tool") or common.check_unloaded_plugin("oasis-mod-spring") then
    print("\27[31mInstalled plugin modules have been detected.\27[0m")
    print("\27[31mThe OpenWrt system must be rebooted to use them.\27[0m")
    print()
end

if not common.check_prepare_oasis() then

    print([=[
============================================================
                    REBOOT REQUIRED
============================================================
Oasis or plugin module has been installed.

please choose one of the following options:
1. Reboot OpenWrt:
        root@OpenWrt:~# reboot
2. Restart rpcd service:
        root@OpenWrt:~# service rpcd restart

============================================================
    ]=])

    return
end

local oasis  = require("oasis.chat.main")

local options_spec = {
    ["-n"] = "n",
    ["-u"] = "u",
    ["-k"] = "k",
    ["-m"] = "m",
    ["-s"] = "s"
}

local function help()
    print([=[
Usage: oasis <command> [[<options>] arguments]...

Options:
 -u <Endpoint>          Set the  AI Service Endpoint(URL)
 -k <api-key>           Set the API key
 -m <model>             Set the LLM model
 -p <storage>           Set the storage path
 -s <system message>    Set the new system message (for sysmsg command)
 -c <sysmsg key>        Set the system message key (for sysmsg command)

Commands:
 storage <path> [<chat-max>]
 add [<service> [<endpoint> [<api-key> [<model> [<storage>]]]]]
 change [no=<service-number> [<options> <value>]...]
 select [no=<service-number>]
 delete no=<service-number>
 chat [no=<chat-number>]
 prompt <message>
 sysmsg [<chat|prompt> <options> <value>]
 delchat no=<chat-number>
 rename no=<chat-number> <title>
 list
 tools

Docs:
 https://github.com/utakamo/oasis
    ]=])
end

local function parse_options(args, start_index)
    local options = {}
    local i = start_index
    while i <= #args do
        local opt_key = args[i]
        local opt_val = args[i + 1]
        local opt_name = options_spec[opt_key]
        if opt_name and opt_val then
            options[opt_name] = opt_val
            i = i + 2
        else
            i = i + 1
        end
    end
    return options
end

local function extract_no(arg_str)
    local prefix = "no="
    if arg_str and arg_str:sub(1, #prefix) == prefix then
        return arg_str:sub(#prefix + 1)
    end
    return nil
end

local commands = {}

commands.storage = function(args)
    oasis.storage({ path = args[2], chat_max = args[3] })
end

commands.add = function(args)
    oasis.add({
        service  = args[2],
        endpoint = args[3],
        api_key  = args[4],
        model    = args[5],
    })
end

commands.change = function(args)

    local no = extract_no(args[2])

    if no then
        local options = parse_options(args, 3)
        oasis.change({ no = no }, options)
    else
        oasis.show_service_list()
    end
end

commands.select = function(args)

    local no = extract_no(args[2])

    if no then
        oasis.select({ no = no })
    else
        oasis.show_service_list()
    end
end

commands.delete = function(args)

    local no = extract_no(args[2])

    if no then
        oasis.delete({ no = no })
    else
        oasis.show_service_list()
    end
end

commands.chat = function(args)
    local no = extract_no(args[2])
    oasis.chat({ no = no })
end

commands.delchat = function(args)
    local no = extract_no(args[2])
    if no then
        oasis.delchat({ no = no })
    else
        oasis.list()
    end
end

commands.prompt = function(args)
    if args[2] then
        local message = table.concat(args, " ", 2)
        oasis.prompt({ message = message })
    else
        help()
    end
end

commands.sysmsg = function(args)
    oasis.sysmsg({
        cmd                 = args[2],
        option              = args[3],
        param               = args[4]
    })
end

commands.rename = function(args)
    local no = extract_no(args[2])
    if no and args[3] then
        oasis.rename({ no = no, title = args[3] })
    else
        oasis.list()
    end
end

commands.list = function()
    oasis.list()
end

commands.tools = function()
    oasis.tools()
end

local main_cmd = arg[1]
if not main_cmd or not commands[main_cmd] then
    help()
else
    commands[main_cmd](arg)
end
