<%+header%>

<link rel="stylesheet" type="text/css" href="<%= resource %>/oasis/chat.css">
<style>
@keyframes oasis-fade-in-up {
  from { opacity: 0; transform: translateY(8px); }
  to   { opacity: 1; transform: none; }
}
.chat-messages .message { animation: oasis-fade-in-up 0.22s ease-out; will-change: transform, opacity; }
/* scroll-to-bottom floating button */
.chat-container { position: relative; }
#scroll-bottom-btn {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  bottom: 82px;
  width: 44px;
  height: 44px;
  border-radius: 50%;
  background: rgba(0,0,0,0.6);
  color: #fff;
  border: none;
  display: grid;
  place-items: center;
  box-shadow: 0 2px 8px rgba(0,0,0,0.3);
  cursor: pointer;
  opacity: 0;
  pointer-events: none;
  transition: opacity .18s ease;
  z-index: 3;
}
#scroll-bottom-btn .material-icons { font-size: 28px; line-height: 1; }
#scroll-bottom-btn.show { opacity: 1; pointer-events: auto; }
@media (max-width: 768px) {
  #scroll-bottom-btn { bottom: 106px; }
}

/* download overlay */
.download-overlay {
  position: absolute;
  inset: 0;
  background: rgba(0,0,0,0.35);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}
.download-overlay.show { display: flex; }
.download-card {
  min-width: 240px;
  max-width: 80vw;
  background: #1e1e1e;
  color: #fff;
  border-radius: 12px;
  padding: 16px 18px;
  box-shadow: 0 6px 24px rgba(0,0,0,0.35);
  display: grid;
  grid-template-columns: 36px 1fr;
  gap: 12px;
}
.download-icon {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: rgba(255,255,255,0.12);
  display: grid;
  place-items: center;
}
.download-icon .material-icons { font-size: 24px; animation: dlBounce 1.2s ease-in-out infinite; }
@keyframes dlBounce {
  0%, 100% { transform: translateY(0); opacity: .9; }
  50% { transform: translateY(-4px); opacity: 1; }
}
.download-text { font-size: 14px; line-height: 1.5; word-break: break-word; }
</style>

<div class="oasis-container">
    <div class="chat-list-container">
        <label for="import-chat-data" id="import-button" style="width:100%;">Import Chat Data +</label>
        <input type="file" id="import-chat-data" accept=".json" style="display: none;">
        <!--<button type="button" id="import-button">Import Chat Data</button>-->
            <button id="new-button">New Chat</button>
            <div class="sidebar-label">System Message</div>
            <select id="sysmsg-select" name="sysmsg-select"></select>
            <div class="sidebar-label">Attach UCI info</div>
            <select id="uci-config-list" name="uci-config-list">
                <option value="---">---</option>
            </select>
            <div class="sidebar-label">History</div>
        <ul id="chat-list"></ul>
    </div>

    <div class="chat-container">
        
        <div id="keyboard-padding"></div>
        <select id="ai-service-list"></select>
        <div class="chat-messages"></div>
        <button id="scroll-bottom-btn" aria-label="Scroll to latest">
            <span class="material-icons">arrow_drop_down</span>
        </button>
        <div class="download-overlay" id="download-overlay" aria-hidden="true">
            <div class="download-card" role="status" aria-live="polite">
                <div class="download-icon"><span class="material-icons">download</span></div>
                <div class="download-text" id="download-overlay-text">Downloading...</div>
            </div>
        </div>
        <div class="chat-input">
            <div class="chat-input-fields">
                <div class="inline-sysmsg-field">
                    <div class="sidebar-label">System Message</div>
                    <select id="inline-sysmsg-select" name="inline-sysmsg-select"></select>
                </div>
                <textarea id="message-input" placeholder="Your Message"></textarea>
            </div>
            <div class="chat-buttons">
                <button id="send-button">Send</button>
                <button id="open-bottom-sheet" class="mobile-fab" aria-label="Open options">
                    <span class="material-icons">tune</span>
                </button>
                <button id="smp-send-button" style="border: none; background: none; cursor: pointer;">
                    <span class="material-icons send-icon">send</span>
                </button>
                <button id="smp-new-mini" style="border: none; background: none; cursor: pointer; display:none;">
                    <span class="material-icons send-icon">add_comment</span>
                </button>
            </div>
        </div>
        <!-- Mobile bottom sheet container -->
        <div class="mobile-bottom-sheet" id="mobile-bottom-sheet" aria-hidden="true">
            <div class="sheet-handle"></div>
            <div class="sheet-content">
                <label for="smp-import-chat-data" id="smp-import-button" style="width: 100%;">Import Chat Data +</label>
                <input type="file" id="smp-import-chat-data" accept=".json" style="display: none;">
                <div class="sidebar-label" style="margin-top:10px;">Attach UCI info</div>
                <select id="mb-uci-config-list" name="mb-uci-config-list">
                    <option value="---">---</option>
                </select>
                <div class="sidebar-label" style="margin-top:10px;">History</div>
                <ul id="mb-chat-list"></ul>
            </div>
        </div>
    </div>

    <div class="oasis-dropdown" id="oasis-dropdown">
        <button class="oasis-menu-item" data-action="delete">Delete</button>
        <button class="oasis-menu-item" data-action="rename">Rename</button>
        <button class="oasis-menu-item" data-action="export">Export</button>
        <button class="oasis-menu-item" data-action="cancel">Cancel</button>
    </div>

    <div class="rename-popup-overlay" id="rename-popup-overlay"></div>
    <div class="rename-popup" id="rename-popup">
        <h3>Rename chat name</h3>
        <input type="text" id="rename-line-box" >
        <div class="rename-popup-buttons">
            <button id="rename">Rename</button>
            <button id="rename-cancel" onclick="closeRenamePopup()">Cancel</button>
        </div>
    </div>

    <div class="export-popup-overlay" id="export-popup-overlay"></div>
    <div class="export-popup" id="export-popup">
        <h3>Select Export Type</h3>
        <div class="export-popup-buttons">
            <button id="json-export">Raw(JSON)</button>
            <button id="text-export">Text</button>
            <button id="export-cancel" onclick="closeExportPopup()">Cancel</button>
        </div>
    </div>

    

    <div class="applying-popup" id="applying-popup" role="dialog" aria-modal="true" aria-labelledby="applying-popup-title">
        <h2 id="applying-popup-title"></h2>
        <div class="applying-progress">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        <div class="progress-info" id="progressInfo"></div>
        <div id="reboot_announce" style="display: none; color: #00cc06">Executed reboot system!!</div>
        <!-- <button class="close-applying-popup" id="close-applying-popup">Reload</button> -->
    </div>

    <div class="confirm-popup" id="confirm-popup" role="dialog" aria-modal="true" aria-labelledby="confirm-title" aria-describedby="confirm-popup-pre">
        <h2 id="confirm-title">Finalize this settings?</h2>
        <pre class="console-command-color" id="confirm-popup-pre"></pre>
        <div class="confirm-popup-buttons">
            <button id="finalize">Finalize</button>
            <button id="rollback">Rollback</button>
        </div>
    </div>

    <!-- System Message popup removed -->
</div>

<script>

    
    let activeConversation = false;
    let targetChatItemId = null;
    let chatList = null;
    let icon_name = null;
    let sysmsg_list = null;
    let sysmsg_key = "";
    let targetChatId = "";
    let message_outputing = false;
    const resourcePath = '<%= resource %>';
    let ai_service_list = [];
    let scrollLockEnabled = false;
    let isKeyboardOpen = false;
    let pendingBottomOnKeyboardOpen = false;
    let currentAssistantMessageDiv = null;

    // Overlay helpers
    function showDownloadOverlay(text) {
        const ov = document.getElementById('download-overlay');
        const tx = document.getElementById('download-overlay-text');
        if (tx && typeof text === 'string') tx.textContent = text;
        if (ov) {
            ov.classList.add('show');
            ov.setAttribute('aria-hidden', 'false');
        }
    }
    function hideDownloadOverlay() {
        const ov = document.getElementById('download-overlay');
        if (ov) {
            ov.classList.remove('show');
            ov.setAttribute('aria-hidden', 'true');
        }
    }

    function hideDownloadOverlayAndWait() {
        hideDownloadOverlay();
        return new Promise((resolve) => {
            requestAnimationFrame(() => {
                requestAnimationFrame(resolve);
            });
        });
    }

    // Tool execution notice (use existing look & feel as Tool used)
    function showToolExecutionNotice(message) {
        const iconPath = `${resourcePath}/oasis/${icon_name}`;
        const msgDiv = document.createElement('div');
        msgDiv.className = 'message received';
        const iconDiv = document.createElement('div');
        iconDiv.className = 'icon';
        iconDiv.style.backgroundImage = `url(${iconPath})`;
        const textDiv = document.createElement('div');
        textDiv.className = 'message-text chat-bubble';
        const safe = typeof message === 'string' && message.length ? message : 'Executing tool...';
        textDiv.innerHTML = `<div class="tool-notice">${sanitizeHTML(safe)}</div>`;
        msgDiv.appendChild(iconDiv);
        msgDiv.appendChild(textDiv);
        const chatRoot = document.querySelector('.chat-messages');
        if (chatRoot) {
            if (currentAssistantMessageDiv && chatRoot.contains(currentAssistantMessageDiv)) {
                chatRoot.insertBefore(msgDiv, currentAssistantMessageDiv);
            } else {
                chatRoot.appendChild(msgDiv);
            }
        }
        keepLatestMessageVisible(false);
    }

    // Center popups within the right column (.chat-container)
    function centerElementInChat(element) {
        const chatContainer = document.querySelector('.chat-container');
        if (!element || !chatContainer) return;
        const rect = chatContainer.getBoundingClientRect();
        const centerX = rect.left + (rect.width / 2);
        const centerY = rect.top + (rect.height / 2);
        element.style.position = 'fixed';
        element.style.left = `${centerX}px`;
        element.style.top = `${centerY}px`;
        element.style.transform = 'translate(-50%, -50%)';
    }

    function recenterVisiblePopups() {
        const applying = document.getElementById('applying-popup');
        if (applying && getComputedStyle(applying).display !== 'none') {
            centerElementInChat(applying);
        }
        const confirm = document.getElementById('confirm-popup');
        if (confirm && getComputedStyle(confirm).display !== 'none') {
            centerElementInChat(confirm);
        }
    }

    // Ensure an element is fully visible inside a scroll container
    function ensureElementFullyVisible(container, target, extraPadding = 24) {
        if (!container || !target) return;
        const cRect = container.getBoundingClientRect();
        const tRect = target.getBoundingClientRect();
        const overshootBottom = tRect.bottom - (cRect.bottom - extraPadding);
        const overshootTop = (cRect.top + extraPadding) - tRect.top;
        if (overshootBottom > 0) {
            container.scrollTop += overshootBottom;
        } else if (overshootTop > 0) {
            container.scrollTop -= overshootTop;
        }
    }

    // Keep the latest chat message visible (handles mobile soft keyboard animations)
    // If force=false, only scroll when user is near bottom (stickToBottom=true)
    function keepLatestMessageVisible(force = false) {
        const chatMessages = document.querySelector('.chat-messages');
        if (!chatMessages) return;
        if (!force && !window.__oasisStickToBottom) return;
        const lastReceived = chatMessages.querySelector('.message.received:last-of-type');
        const target = lastReceived || chatMessages.querySelector('.message:last-child');
        const doScroll = () => ensureElementFullyVisible(chatMessages, target, 24);
        doScroll();
        if (force) {
            // Retry to absorb viewport/IME animation timing
            setTimeout(doScroll, 100);
            setTimeout(doScroll, 250);
        }
    }

    // Align conversation start to the top of the chat viewport
    function anchorChatToTop() {
        const chatMessages = document.querySelector('.chat-messages');
        if (!chatMessages) return;
        chatMessages.scrollTop = 0;
    }

    // Ensure the first chat message is visually below the AI service select
    function ensureFirstMessageBelowAISelect() {
        const chatMessages = document.querySelector('.chat-messages');
        const aiSelect = document.getElementById('ai-service-list');
        if (!chatMessages || !aiSelect) return;
        const firstMsg = chatMessages.querySelector('.message');
        if (!firstMsg) return;
        const firstRect = firstMsg.getBoundingClientRect();
        const aiRect = aiSelect.getBoundingClientRect();
        const vp = window.visualViewport;
        const viewportTop = vp ? vp.offsetTop : 0;
        // desired top is at least AI select bottom plus margin, and within visual viewport
        const desiredTop = Math.max(aiRect.bottom + 8, viewportTop + 8);
        const delta = desiredTop - firstRect.top;
        if (delta > 0) {
            // Move content down into view
            chatMessages.scrollTop = Math.max(0, chatMessages.scrollTop - delta);
        }
    }

    function alignFirstConversationUnderAI() {
        // Run a few times to stabilize after keyboard layout is applied
        const doAlign = () => {
            anchorChatToTop();
            ensureFirstMessageBelowAISelect();
        };
        doAlign();
        setTimeout(doAlign, 50);
        setTimeout(doAlign, 150);
        setTimeout(doAlign, 300);
        setTimeout(doAlign, 450);
    }

    function setChatScrollLock(enabled) {
        // Always keep scrolling enabled. Only perform unlock cleanup if needed.
        const cm = document.querySelector('.chat-messages');
        if (!cm) return;
        if (scrollLockEnabled) {
            // If previously locked, remove handlers and restore overflow
            cm.style.overflowY = cm.dataset && cm.dataset.prevOverflowY !== undefined ? cm.dataset.prevOverflowY : '';
            if (cm._wheelHandler) { cm.removeEventListener('wheel', cm._wheelHandler); delete cm._wheelHandler; }
            if (cm._touchHandler) { cm.removeEventListener('touchmove', cm._touchHandler); delete cm._touchHandler; }
        }
        scrollLockEnabled = false;
    }

    function updateScrollLockState() {
        // No-op: scrolling is always enabled now
        setChatScrollLock(false);
    }

    window.addEventListener('resize', recenterVisiblePopups);
    // Show compact New Chat icon on small viewports (desktop included)
    function updateCompactNewButtonForViewport() {
        const smpNewBtn = document.getElementById('smp-new-button');
        const smpNewMini = document.getElementById('smp-new-mini');
        if (!smpNewMini) return;
        const isSmall = window.innerWidth <= 768;
        if (isSmall) {
            smpNewMini.style.display = 'block';
            if (smpNewBtn) smpNewBtn.style.display = 'none';
            if (!smpNewMini.dataset.bound) {
                smpNewMini.addEventListener('click', async function() {
                    await new_chat_action();
                });
                smpNewMini.dataset.bound = '1';
            }
        } else {
            smpNewMini.style.display = 'none';
            if (smpNewBtn) smpNewBtn.style.display = '';
        }
    }
    window.addEventListener('resize', updateCompactNewButtonForViewport);

    // Hide transient overlays/menus when viewport changes to avoid lingering UI
    window.addEventListener('resize', function () {
        const dropdown = document.getElementById('oasis-dropdown');
        if (dropdown) dropdown.style.display = 'none';
        // legacy smartphone dropdown was removed
    });

    function loadPaperPlane() {
        const style = document.createElement('style');
        style.textContent = `
            @font-face {
                font-family: 'Material Icons';
                font-style: normal;
                font-weight: 400;
                src: url('${resourcePath}/oasis/fonts/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2') format('woff2');
            }
            .material-icons {
                font-family: 'Material Icons';
                font-weight: normal;
                font-style: normal;
                font-size: 24px;
                line-height: 1;
                letter-spacing: normal;
                text-transform: none;
                display: inline-block;
                white-space: nowrap;
                word-wrap: normal;
                direction: ltr;
                -webkit-font-feature-settings: 'liga';
                -webkit-font-smoothing: antialiased;
            }
        `;
        document.head.appendChild(style);
    }

    /* legacy smartphone hamburger removed */

    function convertMarkdownToHTML(input) {
        let html = '';
        let isCodeBlock = false;
        let currentLanguage = '';
        const lines = input.split('\n');

        for (let line of lines) {

            const trimmedLine = line.trim()

            if (trimmedLine.startsWith('```')) {
                if (!isCodeBlock) {
                    currentLanguage = trimmedLine.slice(3).trim();
                    const languageClass = currentLanguage ? ` language-${escapeHTML(currentLanguage)}` : '';
                    html += `<pre class="console-command-color${languageClass}">`;
                    isCodeBlock = true;
                } else {
                    html += '</pre>';
                    isCodeBlock = false;
                }
            } else if (isCodeBlock) {
                html += escapeHTML(line) + '\n';
            } else {
                line = line.replace(/^###### (.+)$/gm, '<h6 style="color:#DCDCDC;">$1</h6>');
                line = line.replace(/^##### (.+)$/gm, '<h5 style="color:#708090;">$1</h5>');
                line = line.replace(/^#### (.+)$/gm, '<h4 style="color:#B0C4DE;">$1</h4>');
                line = line.replace(/^### (.+)$/gm, '<h3 style="color:#4682B4;">$1</h3>');
                line = line.replace(/^## (.+)$/gm, '<h2 style="color:#6495ED;">$1</h2>');
                line = line.replace(/^# (.+)$/gm, '<h1>$1</h1>');
                line = line.replace(/\*\*(.+?)\*\*/g, '<b>$1</b>');
                line = line.replace(/\*(.+?)\*/g, '<i>$1</i>');
                // Blockquote
                line = line.replace(/^>\s+(.+)$/gm, '<blockquote>$1</blockquote>');
                // Inline code
                line = line.replace(/`([^`]+)`/g, '<code class="inline-code">$1<\/code>');
                // Markdown links [text](url)
                line = line.replace(/\[([^\]]+)\]\((https?:\/\/[^\s)]+)\)/g, '<a href="$2" target="_blank" rel="noopener">$1<\/a>');
                // Autolink bare URLs
                line = line.replace(/(https?:\/\/[^\s<]+)/g, '<a href="$1" target="_blank" rel="noopener">$1<\/a>');
                html += line + '<br>';
            }
        }

        if (isCodeBlock) {
            html += '</pre>';
        }

        return html;
    }

    function escapeHTML(str) {
        return str.replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
    }

    // Basic sanitizer to drop style/script/iframe and inline event/style attrs
    function sanitizeHTML(dirtyHtml) {
        const tmp = document.createElement('div');
        tmp.innerHTML = dirtyHtml || '';

        const disallowed = new Set(['style','script','iframe','object','embed','link','meta','svg','math','form','template','audio','video','source','picture']);
        const walker = document.createTreeWalker(tmp, NodeFilter.SHOW_ELEMENT, null, false);
        const toRemove = [];
        while (walker.nextNode()) {
            const el = walker.currentNode;
            const tag = el.tagName ? el.tagName.toLowerCase() : '';
            if (disallowed.has(tag)) { toRemove.push(el); continue; }
            const attrs = Array.from(el.attributes || []);
            for (const attr of attrs) {
                const n = attr.name.toLowerCase();
                if (n === 'style' || n.startsWith('on') || n === 'srcset' || n === 'xlink:href') {
                    el.removeAttribute(attr.name);
                }
            }
        }
        toRemove.forEach(n => n.remove());
        return tmp.innerHTML;
    }

    function closeRenamePopup() {
        const popup = document.getElementById('rename-popup');
        const overlay = document.getElementById('rename-popup-overlay');
        const rename_box = document.getElementById('rename-line-box');
        rename_box.value = '';
        popup.style.display = 'none';
        overlay.style.display = 'none';
    }

    function closeExportPopup() {
        const popup = document.getElementById('export-popup');
        const overlay = document.getElementById('export-popup-overlay');
        popup.style.display = 'none';
        overlay.style.display = 'none';
    }

    function check_temporary_setting() {

        fetch('<%=build_url("admin", "network", "oasis", "confirm")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        })
        .then(response => response.json())
        .then(data => {

            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if (data.status === "OK") {
                //console.log(data.uci_list);
                const preElement = document.getElementById("confirm-popup-pre");
                const popup = document.getElementById("confirm-popup");
                const finalizeButton = document.getElementById("finalize");
                const rollbackButton = document.getElementById("rollback");
                popup.style.display = 'block';
                centerElementInChat(popup);

                const uci_list = JSON.parse(data.uci_list);

                Object.keys(uci_list).forEach(key => {
                    const items = uci_list[key];

                    if (Array.isArray(items) && items.length > 0) {
                        //console.log(`Processing items under '${key}':`);
                        items.forEach(item => {
                            if (item.class && item.param) {
                                //const { option, config, value, section } = item.class;
                                const param = item.param;
                                //const output = `Key: ${key}, Config: ${config}, Section: ${section}, Option: ${option}, Value: ${value}, Param: ${param}`;
                                preElement.textContent += `uci ${key} ${param}\n`;
                            }
                        });
                    }
                });

                finalizeButton.addEventListener("click", function (event) {
                    //console.log("finalize click");

                    fetch('<%=build_url("admin", "network", "oasis", "finalize")%>', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {

                        if (data.error) {
                            console.error("Error from server:", data.error);
                            return;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });

                    popup.style.display = "none";
                });

                rollbackButton.addEventListener("click", function (event) {
                    //console.log("rollback click");

                    fetch('<%=build_url("admin", "network", "oasis", "rollback")%>', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {

                        if (data.error) {
                            console.error("Error from server:", data.error);
                            return;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });

                    popup.style.display = "none";

                    const applying_popup = document.getElementById('applying-popup');
                    const title = document.getElementById('applying-popup-title');
                    const progressBar = document.getElementById('progressBar');

                    title.textContent = "Rollback..."
                    applying_popup.style.display = 'block';
                    centerElementInChat(applying_popup);
                    progressBar.style.width = '0';

                    setTimeout(() => {
                        progressBar.style.width = '100%';
                    }, 100);

                    setTimeout(() => {
                        reboot_announce.style.display = 'block';
                    }, 10100);
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    // Global: Create chat list items and attach events (callable from anywhere)
    function addChatListEntry(id, title) {
        const chatMessagesContainer = document.querySelector('.chat-messages');
        const chatListContainer = document.getElementById("chat-list");
            // legacy smartphone dropdown was removed
        const dropdown = document.getElementById("oasis-dropdown");

        const li = document.createElement("li");

        li.setAttribute("data-id", id);

        const span = document.createElement("span");
        span.textContent = title;
        li.appendChild(span);

                const menuContainer = document.createElement("div");
                menuContainer.classList.add("oasis-hamburger-menu");
                const menuButton = document.createElement("button");
                menuButton.classList.add("oasis-menu-btn");
                menuButton.textContent = "⋮";
                menuButton.addEventListener("click", function (event) {
                    targetChatItemId = event.target.closest("li").getAttribute("data-id");
                    event.stopPropagation();
                    const rect = this.getBoundingClientRect();
                    // Two-column (desktop) layout: place dialog's top-left at the right side of kebab
                    dropdown.style.position = 'absolute';
                    dropdown.style.transform = 'none';
                    dropdown.style.top = `${rect.top + window.scrollY}px`;
                    dropdown.style.left = `${rect.right + window.scrollX}px`;
                    dropdown.style.display = "block";
                });
        menuContainer.appendChild(menuButton);
        li.appendChild(menuContainer);
        chatListContainer.appendChild(li);
        // Sync mobile bottom sheet list whenever a new item is added on desktop
        try {
            if (typeof updateMobileBottomSheetFromDesktop === 'function') {
                updateMobileBottomSheetFromDesktop();
                const mbList = document.getElementById('mb-chat-list');
                if (mbList && mbList.lastElementChild) {
                    mbList.lastElementChild.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                }
                const sheetContent = document.querySelector('#mobile-bottom-sheet .sheet-content');
                const sheet = document.getElementById('mobile-bottom-sheet');
                if (sheet && sheet.classList.contains('show') && sheetContent) {
                    sheetContent.scrollTop = sheetContent.scrollHeight;
                }
            }
        } catch (_) {}

        li.addEventListener('click', function (event) {
                    const systemMessage = document.getElementById("oasis-system");
                    if (systemMessage !== null) {
                        chatMessagesContainer.removeChild(systemMessage);
                    }
                    targetChatItemId = event.target.closest("li").getAttribute("data-id");
                    if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                        return;
                    }
                    handleChatItemClick(targetChatItemId);
        });
    }

    document.addEventListener('DOMContentLoaded', function () {

        loadPaperPlane();
        const chatMessagesContainer = document.querySelector('.chat-messages');
        const chatListContainer = document.getElementById("chat-list");
        // legacy smartphone dropdown was removed
        const dropdown = document.getElementById("oasis-dropdown");

        // Scroll-to-bottom button click -> smooth scroll to latest
        const scrollBtn = document.getElementById('scroll-bottom-btn');
        if (scrollBtn) {
            scrollBtn.addEventListener('click', () => {
                const cm = document.querySelector('.chat-messages');
                if (cm) cm.scrollTo({ top: cm.scrollHeight, behavior: 'smooth' });
            });
        }

        // Mobile keyboard handling: keep latest messages visible when IME opens
        // Smooth keyboard-follow: rAF-throttled class/variable updates
        let __vvLast = { left: 0, width: 0, kb: 0, inputH: 0, topPad: 0, applied: false };
        let __vvPending = null;
        let __vvRaf = null;
        let __kbDelayTimer = null;      // 600ms delayed apply timer
        let __kbArmedState = null;      // last armed state to apply
        function applyKeyboardLayout(state) {
            const inputBar = document.querySelector('.chat-input');
            const chatMessages = document.querySelector('.chat-messages');
            if (!inputBar || !chatMessages) return;
            const { isSmallViewport, kb, left, width, inputH, topPad } = state;
            if (!isSmallViewport) {
                if (__vvLast.applied) {
                    inputBar.classList.remove('keyboard-open');
                    chatMessages.classList.remove('keyboard-open');
                    __vvLast.applied = false;
                }
                isKeyboardOpen = false;
                return;
            }
            if (kb > 0) {
                const nLeft = Math.round(left);
                const nWidth = Math.round(width);
                const nKb = Math.round(kb);
                const nInput = Math.round(inputH);
                const nTop = Math.round(topPad);
                const changed = (
                    nLeft !== __vvLast.left ||
                    nWidth !== __vvLast.width ||
                    nKb !== __vvLast.kb ||
                    nInput !== __vvLast.inputH ||
                    nTop !== __vvLast.topPad ||
                    !__vvLast.applied
                );
                if (changed) {
                    document.documentElement.style.setProperty('--vv-left', nLeft + 'px');
                    document.documentElement.style.setProperty('--vv-width', nWidth + 'px');
                    document.documentElement.style.setProperty('--kb-bottom', nKb + 'px');
                    document.documentElement.style.setProperty('--input-height', nInput + 'px');
                    document.documentElement.style.setProperty('--ai-top-padding', nTop + 'px');
                    inputBar.classList.add('keyboard-open');
                    chatMessages.classList.add('keyboard-open');
                    __vvLast = { left: nLeft, width: nWidth, kb: nKb, inputH: nInput, topPad: nTop, applied: true };
                }
                isKeyboardOpen = true;
            } else {
                if (__vvLast.applied) {
                    inputBar.classList.remove('keyboard-open');
                    chatMessages.classList.remove('keyboard-open');
                    __vvLast.applied = false;
                }
                isKeyboardOpen = false;
            }
        }
        function scheduleKeyboardLayout(state) {
            __vvPending = state;
            if (__vvRaf) cancelAnimationFrame(__vvRaf);
            __vvRaf = requestAnimationFrame(() => {
                applyKeyboardLayout(__vvPending);
                __vvRaf = null;
            });
        }

        function releaseKeyboardLayout() {
            const inputBar = document.querySelector('.chat-input');
            const chatMessages = document.querySelector('.chat-messages');
            if (!inputBar || !chatMessages) return;
            inputBar.classList.remove('keyboard-open');
            chatMessages.classList.remove('keyboard-open');
            isKeyboardOpen = false;
            __vvLast.applied = false;
        }
        function adjustForKeyboard() {
            const chatMessages = document.querySelector('.chat-messages');
            const inputBar = document.querySelector('.chat-input');
            const aiSelect = document.getElementById('ai-service-list');
            if (!chatMessages || !inputBar) return;
            const isSmallViewport = window.innerWidth <= 768;
            // On desktop (two-column), never fix input bar to viewport edges
            if (!isSmallViewport) {
                // reset any mobile keyboard styles just in case
                inputBar.style.position = '';
                inputBar.style.left = '';
                inputBar.style.width = '';
                inputBar.style.bottom = '';
                inputBar.style.transform = '';
                inputBar.style.zIndex = '';
                chatMessages.style.paddingBottom = '';
                chatMessages.style.paddingTop = '';
                isKeyboardOpen = false;
                return;
            }
            const vp = window.visualViewport;
            const viewportHeight = vp ? (vp.height + vp.offsetTop) : window.innerHeight;
            const kb = Math.max(0, window.innerHeight - viewportHeight);
            const inputHeight = inputBar.offsetHeight || 0;
            const topPadding = aiSelect ? (aiSelect.offsetHeight + 8) : 0;
            const left = vp ? vp.offsetLeft : 0;
            const width = vp ? vp.width : window.innerWidth;
            if (kb > 0) {
                // Arm state and delay apply by 600ms to avoid jitter while viewport animates
                __kbArmedState = { isSmallViewport, kb, left, width, inputH: inputHeight, topPad: topPadding };
                if (__kbDelayTimer) clearTimeout(__kbDelayTimer);
                __kbDelayTimer = setTimeout(() => {
                    // Apply only if still armed (keyboard likely still open)
                    if (__kbArmedState) {
                        scheduleKeyboardLayout(__kbArmedState);
                        if (pendingBottomOnKeyboardOpen) {
                            keepLatestMessageVisible(true);
                            pendingBottomOnKeyboardOpen = false;
                        } else if (activeConversation) {
                            keepLatestMessageVisible(true);
                        } else if (!targetChatId) {
                            // First conversation on new chat: ensure first pair is under AI select
                            alignFirstConversationUnderAI();
                        }
                    }
                }, 600);
            } else {
                // Keyboard hidden: cancel pending and restore
                if (__kbDelayTimer) { clearTimeout(__kbDelayTimer); __kbDelayTimer = null; }
                __kbArmedState = null;
                releaseKeyboardLayout();
                anchorChatToTop();
            }
        }
        // Bind visual viewport events (supported in modern mobile browsers)
        // Track whether user intends to stick to bottom
        function updateStickToBottomFlag() {
            const cm = document.querySelector('.chat-messages');
            if (!cm) return;
            const threshold = 40; // px
            window.__oasisStickToBottom = (cm.scrollHeight - cm.scrollTop - cm.clientHeight) < threshold;
            // If user moved away from bottom while IME is open, restore original layout
            if (isKeyboardOpen && !window.__oasisStickToBottom) {
                releaseKeyboardLayout();
            }
            // Show/hide scroll-to-bottom button
            const btn = document.getElementById('scroll-bottom-btn');
            if (btn) {
                const hasMessages = !!cm.querySelector('.message');
                if (!window.__oasisStickToBottom && hasMessages) {
                    btn.classList.add('show');
                } else {
                    btn.classList.remove('show');
                }
            }
        }
        const cmInit = document.querySelector('.chat-messages');
        if (cmInit) {
            cmInit.addEventListener('scroll', updateStickToBottomFlag, { passive: true });
            cmInit.addEventListener('wheel', () => { if (isKeyboardOpen) releaseKeyboardLayout(); }, { passive: true });
            cmInit.addEventListener('touchstart', () => { if (isKeyboardOpen) releaseKeyboardLayout(); }, { passive: true });
            // initial flag
            updateStickToBottomFlag();
        }
        // Debounced scheduling to avoid thrashing during IME animations
        let __vvDebounceTimer = null;
        function scheduleAdjust(forceBottom = false) {
            if (__vvDebounceTimer) clearTimeout(__vvDebounceTimer);
            __vvDebounceTimer = setTimeout(() => {
                adjustForKeyboard();
                if (forceBottom || activeConversation) keepLatestMessageVisible(true);
                updateScrollLockState();
            }, 60);
        }
        if (window.visualViewport) {
            window.visualViewport.addEventListener('resize', () => scheduleAdjust(false));
            window.visualViewport.addEventListener('scroll', () => scheduleAdjust(false));
        }
        window.addEventListener('resize', () => scheduleAdjust(false));
        window.addEventListener('orientationchange', () => scheduleAdjust(false));

        check_temporary_setting();

        // Helper: populate mobile bottom sheet controls from desktop controls
        function updateMobileBottomSheetFromDesktop() {
            const mbSys = null; // removed from bottom sheet
            const inlineSys = document.getElementById('inline-sysmsg-select');
            const mbUci = document.getElementById('mb-uci-config-list');
            const mbList = document.getElementById('mb-chat-list');
            const desktopSys = document.getElementById('sysmsg-select');
            const desktopUci = document.getElementById('uci-config-list');
            const desktopList = document.getElementById('chat-list');

            // Populate inline System Message (above textarea)
            if (inlineSys && desktopSys) {
                inlineSys.innerHTML = desktopSys.innerHTML;
                inlineSys.value = desktopSys.value;
                inlineSys.disabled = desktopSys.disabled;
                const inlineClone = inlineSys.cloneNode(true);
                inlineSys.parentNode.replaceChild(inlineClone, inlineSys);
                inlineClone.addEventListener('change', (e) => {
                    desktopSys.value = e.target.value;
                    desktopSys.dispatchEvent(new Event('change'));
                });
            }

            // Populate mobile sheet System Message (kept for mobile flow)
            // mb-sysmsg-select was removed

            if (mbUci && desktopUci) {
                mbUci.innerHTML = desktopUci.innerHTML;
                mbUci.value = desktopUci.value;
                const mbUciClone = mbUci.cloneNode(true);
                mbUci.parentNode.replaceChild(mbUciClone, mbUci);
                mbUciClone.addEventListener('change', (e) => {
                    desktopUci.value = e.target.value;
                    desktopUci.dispatchEvent(new Event('change'));
                });
            }

            if (mbList && desktopList) {
                mbList.innerHTML = desktopList.innerHTML;
                mbList.querySelectorAll('li').forEach(li => {
                    // Open chat when tapping the row (but not the kebab)
                    li.addEventListener('click', (ev) => {
                        if ((ev.target && (ev.target.closest && ev.target.closest('.oasis-hamburger-menu'))) ||
                            (ev.target && (ev.target.closest && ev.target.closest('.oasis-menu-btn')))) {
                            return; // handled by kebab
                        }
                        const id = ev.currentTarget.getAttribute('data-id');
                        if (id) {
                            handleChatItemClick(id);
                            const sheet = document.getElementById('mobile-bottom-sheet');
                            if (sheet) {
                                sheet.classList.remove('show');
                                setTimeout(() => sheet.style.display = 'none', 250);
                            }
                        }
                    });
                    // Kebab menu in bottom sheet: open oasis-dropdown
                    const menuBtn = li.querySelector('.oasis-menu-btn');
                    if (menuBtn) {
                        menuBtn.addEventListener('click', function (event) {
                            event.stopPropagation();
                            const dropdown = document.getElementById('oasis-dropdown');
                            targetChatItemId = this.closest('li').getAttribute('data-id');
                            // Show and center the dropdown as a foreground dialog
                            dropdown.style.display = 'block';
                            dropdown.style.position = 'fixed';
                            centerElementInChat(dropdown);
                        });
                    }
                });
            }
        }
        // Expose for global callers (e.g., import handlers defined outside this scope)
        window.updateMobileBottomSheetFromDesktop = updateMobileBottomSheetFromDesktop;
        // Initialize compact New Chat icon state based on viewport
        updateCompactNewButtonForViewport();
        // Initialize mobile bottom sheet bindings if present
(function initMobileBottomSheet() {
            const fab = document.getElementById('open-bottom-sheet');
            const sheet = document.getElementById('mobile-bottom-sheet');
            if (!fab || !sheet) return;
            // Keep FAB inline within chat input buttons; only move sheet to body to avoid clipping
            if (sheet.parentNode !== document.body) document.body.appendChild(sheet);

            // No dynamic repositioning needed since FAB is inline in chat-buttons

            fab.addEventListener('click', () => {
                // Ensure content is up-to-date every time before showing
                updateMobileBottomSheetFromDesktop();
                sheet.style.display = 'block';
                sheet.setAttribute('aria-hidden', 'false');
                requestAnimationFrame(() => {
                    sheet.classList.add('show');
                    const focusTarget = sheet;
                    if (focusTarget && focusTarget.focus) focusTarget.focus();
                });
            });
            // close button removed
            // First population
            updateMobileBottomSheetFromDesktop();

            // No need to track scroll/resize for FAB inline placement
            // Hide bottom sheet and FAB on desktop viewport
            function updateBottomSheetVisibilityForViewport() {
                const isSmall = window.innerWidth <= 768;
                if (!isSmall) {
                    // Hide sheet if visible
                    sheet.classList.remove('show');
                    sheet.setAttribute('aria-hidden', 'true');
                    sheet.style.display = 'none';
                    // Hide FAB
                    fab.style.display = 'none';
                } else {
                    // Show FAB on small viewport
                    fab.style.display = '';
                }
            }
            window.addEventListener('resize', updateBottomSheetVisibilityForViewport);
            // Initial state
            updateBottomSheetVisibilityForViewport();
            // Remove textarea-height tracking to avoid following input height
        })();
        
        // Close bottom sheet when clicking outside, but keep it open if user interacts with dialogs/menus
        document.addEventListener('click', function (ev) {
            const sheet = document.getElementById('mobile-bottom-sheet');
            const fab = document.getElementById('open-bottom-sheet');
            const dropdown = document.getElementById('oasis-dropdown');
            const renamePopup = document.getElementById('rename-popup');
            const renameOverlay = document.getElementById('rename-popup-overlay');
            const exportPopup = document.getElementById('export-popup');
            const exportOverlay = document.getElementById('export-popup-overlay');
            const confirmPopup = document.getElementById('confirm-popup');
            const applyingPopup = document.getElementById('applying-popup');
            if (!sheet || getComputedStyle(sheet).display === 'none') return;
            // If click is inside the sheet, FAB, dropdown, or any foreground dialog/overlay, do not close the sheet
            if (
                sheet.contains(ev.target) ||
                (fab && fab.contains(ev.target)) ||
                (dropdown && dropdown.style.display === 'block' && dropdown.contains(ev.target)) ||
                (renamePopup && renamePopup.contains(ev.target)) ||
                (renameOverlay && renameOverlay.contains(ev.target)) ||
                (exportPopup && exportPopup.contains(ev.target)) ||
                (exportOverlay && exportOverlay.contains(ev.target)) ||
                (confirmPopup && confirmPopup.contains(ev.target)) ||
                (applyingPopup && applyingPopup.contains(ev.target))
            ) return;
            sheet.classList.remove('show');
            sheet.setAttribute('aria-hidden', 'true');
            setTimeout(() => sheet.style.display = 'none', 250);
        });

        // Input: Enter to send / Shift+Enter for newline + auto-resize up to 5 lines + disable SEND when empty
        function initMessageInputAutoResizeAndEnterSend() {
            const messageInputEl = document.getElementById('message-input');
            const sendBtn = document.getElementById('send-button');
            // Determine line-height dynamically (fallback when 'normal')
            const computed = window.getComputedStyle(messageInputEl);
            const parsedLine = parseFloat(computed.lineHeight);
            const lineHeightPx = isNaN(parsedLine) ? 20 : parsedLine;
            const maxLines = 5;

            function autoResizeTextarea() {
                messageInputEl.style.height = 'auto';
                const cs = window.getComputedStyle(messageInputEl);
                const border = parseInt(cs.borderTopWidth) + parseInt(cs.borderBottomWidth);
                const padding = parseInt(cs.paddingTop) + parseInt(cs.paddingBottom);
                const contentHeight = messageInputEl.scrollHeight;
                const maxHeight = (lineHeightPx * maxLines) + padding + border;
                const newHeight = Math.min(contentHeight, maxHeight);
                messageInputEl.style.height = newHeight + 'px';
                messageInputEl.style.overflowY = (contentHeight > maxHeight) ? 'auto' : 'hidden';
            }

            function toggleSendDisabled() {
                const text = messageInputEl.value.trim();
                sendBtn.disabled = text.length === 0;
            }

            messageInputEl.placeholder = 'Your Message (Enter to send, Shift+Enter for newline)';
            messageInputEl.addEventListener('input', function() {
                autoResizeTextarea();
                toggleSendDisabled();
                if (isKeyboardOpen) keepLatestMessageVisible();
            });
            messageInputEl.addEventListener('keydown', function(event) {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    sendBtn.click();
                }
            });

            autoResizeTextarea();
            toggleSendDisabled();
            // Initial adjust for mobile keyboard when focusing the input
            messageInputEl.addEventListener('focus', () => {
                // Flag to scroll to bottom next time the IME opens
                pendingBottomOnKeyboardOpen = true;
                setTimeout(() => { if (isKeyboardOpen) keepLatestMessageVisible(true); }, 50);
                setTimeout(() => { if (isKeyboardOpen) keepLatestMessageVisible(true); }, 200);
            });
        }

        // Run initialization (safe after DOMContentLoaded)
        initMessageInputAutoResizeAndEnterSend();

        // addChatListEntry is defined globally above

        fetch('<%=build_url("admin", "network", "oasis", "base-info")%>', {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            const chatItems = Array.isArray(data.chat.item) ? data.chat.item
                : (typeof data.chat.item === 'object' && data.chat.item !== null && !('id' in data.chat.item)) ? []
                : (data.chat.item ? [data.chat.item] : []);

            // Initialize chatList and sync internal state
            chatList = { item: [] };

            chatItems.forEach(chat => {
                chatList.item.push({ id: chat.id, title: chat.title });
                addChatListEntry(chat.id, chat.title);
            });

            // After desktop controls are filled, sync to mobile bottom sheet
            updateMobileBottomSheetFromDesktop();

            let using_icon = data.icon.ctrl.using;
            icon_name = data.icon.list[using_icon];

            // Populate System Message <select>
            sysmsg_list = data.sysmsg;
            const sysmsgSelect = document.getElementById('sysmsg-select');
            if (sysmsgSelect) {
                sysmsgSelect.innerHTML = '';
            const sortedSysmsgList = sysmsg_list
                .map(item => {
                        if (!item.key || typeof item.key !== 'string') return null;
                        if (item.key === 'default') {
                            return { key: item.key, title: item.title || 'Default', number: -1 };
                        }
                    const match = item.key.match(/^custom_(\d+)$/);
                    if (!match) return null;
                        return { key: item.key, title: item.title || 'No Title', number: parseInt(match[1], 10) };
                    })
                    .filter(Boolean)
                .sort((a, b) => a.number - b.number);

            sortedSysmsgList.forEach(item => {
                    const opt = document.createElement('option');
                    opt.value = item.key;
                    opt.textContent = item.title;
                    sysmsgSelect.appendChild(opt);
                });

                // Set default selection and update global key
                if (sortedSysmsgList.length > 0) {
                    const defaultEntry = sortedSysmsgList.find(x => x.key === 'default') || sortedSysmsgList[0];
                    sysmsgSelect.value = defaultEntry.key;
                    sysmsg_key = defaultEntry.key;
                }

                sysmsgSelect.addEventListener('change', function (e) {
                    sysmsg_key = e.target.value;
                });
                // Enable only for a new chat (no targetChatId yet)
                sysmsgSelect.disabled = (targetChatId && targetChatId.length > 0);
                // Sync to mobile bottom sheet now that System Message is ready
                updateMobileBottomSheetFromDesktop();
            }

            ai_service_list = Array.isArray(data.service) ? data.service : [];
            const aiServiceSelect = document.getElementById("ai-service-list");
            aiServiceSelect.innerHTML = '';  // clear existing options

            let validServiceFound = false;

            ai_service_list.forEach((service, index) => {
                if (service && service.name && service.model) {
                    const option = document.createElement("option");
                    option.value = index;
                    option.textContent = `${service.name} - ${service.model}`;
                    aiServiceSelect.appendChild(option);
                    validServiceFound = true;
                }
            });

            if (!validServiceFound) {
                const option = document.createElement("option");
                option.value = 0;
                option.textContent = "No AI Service";
                aiServiceSelect.appendChild(option);
            }

            const uciConfigSelect = document.getElementById("uci-config-list");
            uciConfigSelect.innerHTML = '';
            const defaultOption = document.createElement("option");
            defaultOption.value = "---";
            defaultOption.textContent = "---";
            uciConfigSelect.appendChild(defaultOption);

            data.configs.forEach(config => {
                const option = document.createElement("option");
                option.value = config;
                option.textContent = config;
                uciConfigSelect.appendChild(option);
            });
            // Sync to mobile bottom sheet now that UCI list is ready
            updateMobileBottomSheetFromDesktop();

            // Smartphone selects mirror (System Message & UCI)
            // smp-sysmsg-select removed

            // smp-uci-config-list removed

        })
        .catch(error => {
            console.error('Error:', error);
        });

        function isMobile() {
            return (
                /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) || 
                (navigator.maxTouchPoints > 0 && window.innerWidth <= 500)
            );
        }

        if (isMobile()) {
            document.getElementById("message-input").addEventListener("keydown", function(event) {
                // On mobile, also use Enter to send / Shift+Enter for newline
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    document.getElementById("send-button").click();
                }
            });

            document.getElementById("message-input").addEventListener("focus", function() {
                setTimeout(() => {
                    this.scrollIntoView({ behavior: "smooth", block: "center" });
                }, 300);
            });

        // Mirror lock state of System Message select on mobile (legacy removed)

        // Replace New Chat button in hamburger with compact icon under send icon (vertical stack)
        const smpNewBtn = document.getElementById('smp-new-button');
        const smpNewMini = document.getElementById('smp-new-mini');
        if (smpNewBtn && smpNewMini) {
            smpNewBtn.style.display = 'none';
            smpNewMini.style.display = 'block';
            smpNewMini.addEventListener('click', async function() {
                await new_chat_action();
            });
        }

        // Setup mobile bottom sheet
        const fab = document.getElementById('open-bottom-sheet');
        const sheet = document.getElementById('mobile-bottom-sheet');
        if (fab && sheet) {
            fab.classList.add('show');
            fab.addEventListener('click', () => {
                sheet.style.display = 'block';
                requestAnimationFrame(() => sheet.classList.add('show'));
            });
            // Mirror selects into bottom sheet (System Message select removed on mobile)
            const mbUci = document.getElementById('mb-uci-config-list');
            const desktopUci = document.getElementById('uci-config-list');
            if (mbUci && desktopUci) {
                mbUci.innerHTML = desktopUci.innerHTML;
                mbUci.value = desktopUci.value;
                mbUci.addEventListener('change', (e) => {
                    desktopUci.value = e.target.value;
                    desktopUci.dispatchEvent(new Event('change'));
                });
            }
        }
        }

        document.addEventListener("click", function (e) {
            dropdown.style.display = 'none';
        });

        document.addEventListener("click", function (event) {
            const target = event.target;

            if (target.classList.contains("oasis-menu-item")) {
                const action = target.getAttribute("data-action");

                if (action === "delete") {
                    handleDeleteAction(target);
                } else if (action === "rename") {
                    handleRenameAction(target, targetChatItemId);
                } else if (action === "export") {
                    handleExportAction(target, targetChatItemId);
                }
            }
        });

        function handleDeleteAction(button) {

            //console.log("Deleting chat with ID:", targetChatItemId);

            if (activeConversation) {
                return;
            }

            fetch('<%=build_url("admin", "network", "oasis", "delete-chat-data")%>', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({ params: targetChatItemId }),
            })
            .then((response) => response.json())
            .then((data) => {
                if (data.status === "OK") {
                    const deletedId = targetChatItemId;
                    const desktopItem = document.querySelector(`#chat-list li[data-id='${deletedId}']`);
                    const mbItem = document.querySelector(`#mb-chat-list li[data-id='${deletedId}']`);

                    let removed = false;
                    if (desktopItem) { desktopItem.remove(); removed = true; }
                    if (mbItem) { mbItem.remove(); removed = true; }

                    if (removed) {
                        const chatMessagesContainer = document.querySelector('.chat-messages');
                        if (chatMessagesContainer) {
                            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
                            messages.forEach(message => message.remove());
                        }
                        // Remove from in-memory chatList
                        if (chatList && Array.isArray(chatList.item)) {
                            chatList.item = chatList.item.filter(entry => String(entry.id) !== String(deletedId));
                        }
                        targetChatId = ""; // clear target id
                        // Hide dropdown if visible
                        const dropdownEl = document.getElementById('oasis-dropdown');
                        if (dropdownEl) dropdownEl.style.display = 'none';
                        // If deletion was triggered from the bottom sheet, keep the sheet open
                        const sheet = document.getElementById('mobile-bottom-sheet');
                        if (sheet && sheet.classList.contains('show')) {
                            // no-op: do not close the sheet
                        }
                        // Refresh mobile sheet list from desktop
                        if (typeof updateMobileBottomSheetFromDesktop === 'function') {
                            updateMobileBottomSheetFromDesktop();
                        }
                    } else {
                        console.error("Could not find the list item with ID:", deletedId);
                    }
                } else {
                    console.error("Error deleting chat:", data.error);
                    alert("Failed to delete chat. Please try again.");
                }
            })
            .catch((error) => {
                console.error("Request failed:", error);
                alert("Failed to delete chat. Please try again.");
            });
        }

        function handleRenameAction(button) {

            //console.log("Renaming chat with ID:", targetChatItemId);
            //const newName = prompt("Enter new name for the chat:", "");

            const renameLineBox = document.getElementById('rename-line-box');
            const popup = document.getElementById('rename-popup');
            const overlay = document.getElementById('rename-popup-overlay');
            popup.style.display = 'block';
            overlay.style.display = 'block';

            const rename = document.getElementById("rename");

        let title = "";
        if (chatList && Array.isArray(chatList.item)) {
            chatList.item.forEach(chat => {
                if (chat.id === targetChatItemId) {
                    title = chat.title;
                }
            });
        }

            renameLineBox.setAttribute('placeholder', title);
            renameLineBox.setAttribute('autocomplete', 'off');

            rename.addEventListener('click', function() {

                const rename_box = document.getElementById('rename-line-box');
                let new_title = rename_box.value;

                if (new_title.length === 0) {
                    return;
                }

                fetch('<%=build_url("admin", "network", "oasis", "rename-chat")%>', {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ id: targetChatItemId, title: new_title })
                })
                .then((response) => response.json())
                .then((data) => {
                    if (data.error) {
                        console.error("Error renaming chat:", data.error);
                        return;
                    }
                })
                .catch((error) => {
                    console.error("Request failed:", error);
                    //alert("Failed to rename chat. Please try again.");
                });

                const desktopItem = document.querySelector(`#chat-list li[data-id='${targetChatItemId}']`);
                const mbItem = document.querySelector(`#mb-chat-list li[data-id='${targetChatItemId}']`);

                const desktopSpan = desktopItem ? desktopItem.querySelector('span') : null;
                const mbSpan = mbItem ? mbItem.querySelector('span') : null;

                if (desktopSpan) desktopSpan.textContent = new_title;
                if (mbSpan) mbSpan.textContent = new_title;
                rename_box.value = "";

                if (chatList && Array.isArray(chatList.item)) {
                chatList.item.forEach(chat => {
                    if (chat.id === targetChatItemId) {
                        chat.title = new_title;
                    }
                });
                }

                closeRenamePopup();
        const overlay = document.getElementById('modal-overlay');
        if (overlay) overlay.style.display = 'none';
                // Refresh mobile list mirror after rename
                if (typeof updateMobileBottomSheetFromDesktop === 'function') {
                    updateMobileBottomSheetFromDesktop();
                }
            }, { once: true })
        }

        function handleExportAction(button, id) {
            const popup = document.getElementById('export-popup');
            const overlay = document.getElementById('export-popup-overlay');
            popup.style.display = 'block';
            overlay.style.display = 'block';

            //console.log("id = " + id);

            const json_export = document.getElementById("json-export");
            const text_export = document.getElementById("text-export");

            json_export.addEventListener('click', function() {
                //console.log("Push JSON!!");

                fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ params: id })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        console.error("Error from server:", data.error);
                        return;
                    }

                    raw_data = JSON.stringify(data, null, 2);

                    const blob = new Blob([raw_data], { type: "application/json" });
                    const url = URL.createObjectURL(blob);

                    const a = document.createElement("a");
                    a.href = url;
                    a.download = `chat_data_${id}.json`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                })
                .catch(error => {
                    console.error('Error:', error);
                });

                closeExportPopup();
            });

            text_export.addEventListener('click', function() {

                let chat_data = "";

                fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ params: id })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        console.error("Error from server:", data.error);
                        return;
                    }

                    data.messages.forEach(message => {
                        if (message.role === 'user') {
                            chat_data += ">>> You\n";
                        } else if (message.role === 'assistant') {
                            chat_data += ">>> AI\n";
                        }

                        if ((message.role === 'user') || (message.role === 'assistant')) {
                            chat_data += message.content + "\n\n";
                        }
                    });

                    const blob = new Blob([chat_data], { type: "text/plain" });
                    const url = URL.createObjectURL(blob);

                    const a = document.createElement("a");
                    a.href = url;
                    a.download = `chat_data_${id}.txt`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                    //console.log("Text file downloaded successfully.");
                })
                .catch(error => {
                    console.error('Error:', error);
                });

                closeExportPopup();
            });

            // Duplicate handler removed
        }
    });

// removed: showTitlePopup (unused)

    async function send_chat_data(systemMessage, messageInput, messageText) {

        const messageContainer = document.createElement('div');
        messageContainer.className = 'message sent';

        const messageTextContainer = document.createElement('div');
        messageTextContainer.className = 'message-text';
        //messageTextContainer.textContent = messageText;
        messageTextContainer.innerHTML = sanitizeHTML(convertMarkdownToHTML(messageText));

        messageContainer.appendChild(messageTextContainer);

        const chatMessagesRoot = document.querySelector('.chat-messages');
        const hasExisting = !!chatMessagesRoot.querySelector('.message');
        chatMessagesRoot.appendChild(messageContainer);

        if (systemMessage !== null) {
            document.querySelector('.chat-messages').removeChild(systemMessage);
        }
    
        messageInput.value = '';
        messageInput.focus();

        const chatMessages = document.querySelector('.chat-messages');
        chatMessages.scrollTop = chatMessages.scrollHeight;

        const receivedMessageContainer = document.createElement('div');
        receivedMessageContainer.className = 'message received';

        const iconPath = `${resourcePath}/oasis/${icon_name}`;
        const receivedIconContainer = document.createElement('div');
        receivedIconContainer.className = 'icon';
        receivedIconContainer.style.backgroundImage = `url(${iconPath})`;

        const receivedMessageTextContainer = document.createElement('div');
        receivedMessageTextContainer.className = 'message-text chat-bubble';

        const typingDots = document.createElement("span");
        typingDots.classList.add("typing-dots");

        for (let i = 0; i < 3; i++) {
            const dot = document.createElement("span");
            typingDots.appendChild(dot);
        }

        const typingText = document.createElement("span");
        typingText.classList.add("typing-text");
        typingText.textContent = "Thinking...";

        receivedMessageTextContainer.appendChild(typingDots);
        receivedMessageTextContainer.appendChild(typingText);

        // Typing indicator only (fixed "Thinking...")
    
        receivedMessageContainer.appendChild(receivedIconContainer);
        receivedMessageContainer.appendChild(receivedMessageTextContainer);

        chatMessagesRoot.appendChild(receivedMessageContainer);
        currentAssistantMessageDiv = receivedMessageContainer;
        // If this is the very first conversation while IME is open, anchor start to top
        const vp = window.visualViewport;
        const keyboardShown = vp ? (window.innerHeight - vp.height - vp.offsetTop) > 0 : false;
        if (!hasExisting && keyboardShown) {
            // Position the first pair at the top of the viewport
            const firstMessage = chatMessagesRoot.querySelector('.message');
            if (firstMessage && firstMessage.scrollIntoView) {
                try { firstMessage.scrollIntoView({ block: 'start' }); } catch (_) {}
            }
            chatMessages.scrollTop = 0;
            ensureFirstMessageBelowAISelect();
        } else {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        let uci_info = await retrieve_uci_show_result(messageTextContainer);
        messageText += uci_info;
        //console.log(messageText);
        send_message(receivedMessageTextContainer, messageText);
    }

        document.getElementById('smp-send-button').addEventListener('click', function(event) {
        event.preventDefault();
        document.getElementById("send-button").click();
    });

        // Send button
    document.getElementById('send-button').addEventListener('click', async function() {

        const systemMessage = document.getElementById("oasis-system");
        const messageInput = document.getElementById('message-input');
        const messageText = messageInput.value.trim();

        if (!messageText) {
            return;
        }

        if (message_outputing) {
            return;
        }

        message_outputing = true;

        // For new chats, do not show popup; use System Message selected in left column

        // Lock System Message selection once the very first message of a new chat is sent
        if (!targetChatId || targetChatId.length === 0) {
            const sysmsgSelect = document.getElementById('sysmsg-select');
            const inlineSys = document.getElementById('inline-sysmsg-select');
            const mbSys = document.getElementById('mb-sysmsg-select');
            if (sysmsgSelect) sysmsgSelect.disabled = true;
            if (inlineSys) inlineSys.disabled = true;
            if (mbSys) mbSys.disabled = true;
        }

        send_chat_data(systemMessage, messageInput, messageText);
        // Ensure the newly appended messages are visible even when IME is open
        keepLatestMessageVisible();
    });

    function show_chat_popup(jsonResponse) {
        message_outputing = false;
        targetChatId = jsonResponse.id;
        //console.log("targetChatId = " + targetChatId);
        // removed: showTitlePopup(jsonResponse.title);

        const itemCount = (chatList !== null) ? chatList.item.length : 0;
        
        if (itemCount === 0) {
            chatList = { item:[] };  
        }

        chatList.item.push({id: jsonResponse.id, title: jsonResponse.title})
        
        // New Chat List Item (refactored)
        addChatListEntry(jsonResponse.id, jsonResponse.title);
    }

    function save_apply_proc(jsonResponse, type) {
        const chatMessagesContainer = document.querySelector('.chat-messages');
        const popup = document.getElementById('applying-popup');
        const title = document.getElementById('applying-popup-title');
        const progressBar = document.getElementById('progressBar');
        //const closePopupButton = document.getElementById('close-applying-popup');

        let uci_list_json = JSON.stringify(jsonResponse.uci_list);

        fetch('<%=build_url("admin", "network", "oasis", "apply-uci-cmd")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({uci_list : uci_list_json, id : targetChatId, type : type})
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('HTTP ' + response.status);
            }
            return response.text();
        })
        .then(_ => { /* ignore body */ })
        .catch(error => {
            console.error('Error:', error);
        });

        // Note: Input init already executed on page load

        const systemMessage = document.getElementById("oasis-system");
        if (systemMessage !== null) {
            chatMessagesContainer.removeChild(systemMessage);
        }

        title.textContent = "Applying the settings...";
        popup.style.display = 'block';
        centerElementInChat(popup);
        progressBar.style.width = '0%';

        const progressInfo = document.getElementById('progressInfo');
        const totalMs = 10000; // reload after 10 seconds
        const startTs = Date.now();

        const tick = () => {
            const elapsed = Date.now() - startTs;
            const pct = Math.min(100, Math.round((elapsed / totalMs) * 100));
            progressBar.style.width = pct + '%';
            if (progressInfo) {
                const remainMs = Math.max(0, totalMs - elapsed);
                const remainSec = Math.ceil(remainMs / 1000);
                progressInfo.textContent = `Reloading in ${remainSec}s (${pct}%)`;
            }
            if (elapsed >= totalMs) {
            window.location.reload();
            } else {
                requestAnimationFrame(tick);
            }
        };
        requestAnimationFrame(tick);

        // Copy button: copy contents of confirm-popup-pre (works after element creation)
        // No copy button needed on Applying

        // Applying dialog cannot be closed by clicking background

        /*
        closePopupButton.addEventListener('click', () => {
            //popup.style.display = 'none';
            window.location.reload();
        });
        */
    }

    function show_notify_popup(jsonResponse) {
        const chatMessagesContainer = document.querySelector('.chat-messages');
        const systemMessage = document.createElement("div");

        systemMessage.classList.add("message", "oasis-system");
        systemMessage.id = "oasis-system";

        const messageTextDiv = document.createElement("div");
        messageTextDiv.className = "message-text";

        const textNode = document.createTextNode("OpenWrt UCI Commands");
        messageTextDiv.appendChild(textNode);

        const preElement = document.createElement("pre");
        preElement.className = "console-command-color";
        preElement.id = "uci-popup-pre";

        Object.keys(jsonResponse.uci_list).forEach(key => {
            const items = jsonResponse.uci_list[key];

            if (Array.isArray(items) && items.length > 0) {
                //console.log(`Processing items under '${key}':`);
                items.forEach(item => {
                    if (item.class && item.param) {
                        //const { option, config, value, section } = item.class;
                        const param = item.param;
                        //const output = `Key: ${key}, Config: ${config}, Section: ${section}, Option: ${option}, Value: ${value}, Param: ${param}`;
                        preElement.textContent += `uci ${key} ${param}\n`;
                    }
                });
            }
        });

        //preElement.textContent = `uci set network.lan.ipaddr=192.168.1.1\nuci set network.lan.proto=static`;
        messageTextDiv.appendChild(preElement);

        const popupButtonsDiv = document.createElement("div");
        popupButtonsDiv.className = "uci-popup-buttons";

        const popupDiv = document.createElement("div");
        popupDiv.className = "uci-popup";

        // TODO: Ask button will be added later
        // const askButton = document.createElement("button");
        // askButton.id = "ask";
        // askButton.textContent = "Ask";
        // popupDiv.appendChild(askButton);

        const applyButton = document.createElement("button");
        applyButton.id = "apply";
        applyButton.textContent = "Apply";
        applyButton.addEventListener('click', function (event) {
            save_apply_proc(jsonResponse, "commit");
        });

        popupDiv.appendChild(applyButton);
        

        const cancelButton = document.createElement("button");
        cancelButton.id = "uci-cancel";
        cancelButton.textContent = "Cancel";
        cancelButton.addEventListener('click', function (event) {
            const systemMessage = document.getElementById("oasis-system");
            // overlay removed
            if (systemMessage) chatMessagesContainer.removeChild(systemMessage);
        });

        popupDiv.appendChild(cancelButton);

        popupButtonsDiv.appendChild(popupDiv);
        messageTextDiv.appendChild(popupButtonsDiv);
        systemMessage.appendChild(messageTextDiv);
        chatMessagesContainer.appendChild(systemMessage);
        // Show overlay when opening confirm (overlay removed)
        // overlay removed
    }


    // TODO: Temporary Fix
    // This function will be removed later.
    function isNumeric(str) {
        return /^\d+$/.test(str);
    }

    async function retrieve_uci_show_result(messageTextContainer) {

        const selectElement = document.getElementById("uci-config-list");
        let target_uci_config = selectElement.value;
        //console.log(target_uci_config);

        if (target_uci_config === '---') {
            return '';
        }

        let uci_info = '';

        try {
            const response = await fetch('<%=build_url("admin", "network", "oasis", "uci-show")%>', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams({ target: target_uci_config })
            });

            const data = await response.json();

            uci_info = '\n\n### [User\'s ' + target_uci_config + ' config]\n';
            uci_info += '```\n';

            for (let i = 0; i < data.length; i++) {
                uci_info += data[i] + '\n';
            }

            uci_info += '```\n';
            messageTextContainer.innerHTML += sanitizeHTML(convertMarkdownToHTML(uci_info));

        } catch (error) {
            console.error('Error:', error);
            return '';
        }

        selectElement.value = '---';
        return uci_info;
    }


    async function send_message(receivedMessageTextContainer, messageText) {
        activeConversation = true;
        const baseUrl = window.location.origin || `${window.location.protocol}//${window.location.host}`;
        let fullMessage = '';
        let is_notify = false;
        let toolNoticesHtml = '';
        let errorNoticesHtml = '';
        let toolNoticeShown = false;
        let toolNoticeMessageDiv = null;

        // Utility to extract complete JSON objects from the buffer
        function extractJsonObjects(text) {
            const objects = [];
            let startIndex = -1;
            let depth = 0;
            let inString = false;
            let escapeNext = false;

            for (let i = 0; i < text.length; i++) {
                const ch = text[i];

                if (inString) {
                    if (escapeNext) {
                        escapeNext = false;
                    } else if (ch === '\\') {
                        escapeNext = true;
                    } else if (ch === '"') {
                        inString = false;
                    }
                    continue;
                }

                if (ch === '"') {
                    inString = true;
                    continue;
                }

                if (ch === '{') {
                    if (depth === 0) startIndex = i;
                    depth++;
                } else if (ch === '}') {
                    depth--;
                    if (depth === 0 && startIndex !== -1) {
                        objects.push(text.slice(startIndex, i + 1));
                        startIndex = -1;
                    }
                }
            }

            let remaining = '';
            if (depth > 0 && startIndex !== -1) {
                remaining = text.slice(startIndex);
            } else if (startIndex === -1) {
                remaining = '';
            }

            return { objects, remaining };
        }

        try {
            const response = await fetch(`${baseUrl}/cgi-bin/oasis`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    cmd: 'chat',
                    id: targetChatId,
                    message: messageText,
                    sysmsg_key: sysmsg_key,
                })
            });

            if (!response.ok) {
                console.error('HTTP Error:', response.status, response.statusText);
                receivedMessageTextContainer.innerHTML = sanitizeHTML(convertMarkdownToHTML('A network error occurred. Please try again later.'));
                return;
            }

            const chatMessages = document.querySelector('.chat-messages');
            const isSmallViewport = window.innerWidth <= 768;
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let buffer = '';

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;

                buffer += decoder.decode(value, { stream: true });

                // Safely extract using brace depth even if NDJSON/SSE prefixes are mixed
                const { objects, remaining } = extractJsonObjects(buffer);
                buffer = remaining;

                for (const jsonText of objects) {
                    let evt = null;
                    try {
                        evt = JSON.parse(jsonText);
                    } catch (e) {
                        continue;
                    }

                    // Custom stream events: execution/download
                    if (evt && typeof evt.type === 'string') {
                        if (evt.type === 'execution') {
                            if (evt.message) showToolExecutionNotice(evt.message);
                            else showToolExecutionNotice('Executing tool...');
                            continue;
                        }
                        if (evt.type === 'download') {
                            showDownloadOverlay(evt.message || 'Downloading...');
                            continue;
                        }
                    }

                    // Tool execution notice
                    // Expected JSON: {"tool_outputs":[{"tool_call_id":"...","output":"...","name":"..."}], "service":"..."}
                    if (evt && Array.isArray(evt.tool_outputs)) {
                        const hasService = (typeof evt.service === 'string' && evt.service.length > 0);
                        const hasOutputs = (evt.tool_outputs.length > 0);
                        const allValid = hasOutputs && evt.tool_outputs.every(o => ('output' in o));

                        const names = hasOutputs
                            ? Array.from(new Set(
                                evt.tool_outputs
                                    .map(o => (typeof o.name === 'string' && o.name.length > 0) ? o.name : null)
                                    .filter(Boolean)
                            ))
                            : [];
                        const toolNamesLabel = names.length ? names.join(', ') : '(unknown)';

                        if (hasService && allValid) {
                            toolNoticesHtml += `<div class=\"tool-notice\">Tool used: <span class=\"tool-name\">${escapeHTML(toolNamesLabel)}</span></div>`;
                            if (!toolNoticeShown) {
                                // Insert Tool Used bubble before current typing bubble
                                const iconPath = `${resourcePath}/oasis/${icon_name}`;
                                const msgDiv = document.createElement('div');
                                msgDiv.className = 'message received';
                                const iconDiv = document.createElement('div');
                                iconDiv.className = 'icon';
                                iconDiv.style.backgroundImage = `url(${iconPath})`;
                                const textDiv = document.createElement('div');
                                textDiv.className = 'message-text chat-bubble';
                                textDiv.innerHTML = toolNoticesHtml;
                                msgDiv.appendChild(iconDiv);
                                msgDiv.appendChild(textDiv);
                                const chatRoot = document.querySelector('.chat-messages');
                                const parentMsg = receivedMessageTextContainer && receivedMessageTextContainer.parentNode;
                                if (chatRoot) {
                                    if (parentMsg && chatRoot.contains(parentMsg)) {
                                        chatRoot.insertBefore(msgDiv, parentMsg);
                                    } else {
                                        chatRoot.appendChild(msgDiv);
                                    }
                                }
                                toolNoticeShown = true;
                                toolNoticeMessageDiv = msgDiv;
                                if (isKeyboardOpen) {
                                    keepLatestMessageVisible(true);
                                    setChatScrollLock(true);
                                } else {
                                    keepLatestMessageVisible(false);
                                }
                            }
                        } else {
                            const missing = [];
                            if (!hasService) missing.push('service');
                            if (!hasOutputs) missing.push('tool_outputs');
                            else if (!allValid) missing.push('tool_outputs[*].output');
                            errorNoticesHtml += `<div class="error-notice">Invalid tool response: missing ${escapeHTML(missing.join(', '))}</div>`;
                        }

                        // Progressive rendering on desktop: keep typing until content arrives
                        if (!isSmallViewport && fullMessage.length > 0) {
                            receivedMessageTextContainer.innerHTML = errorNoticesHtml + convertMarkdownToHTML(fullMessage);
                            if (receivedMessageTextContainer._typingTimer) {
                                clearInterval(receivedMessageTextContainer._typingTimer);
                                delete receivedMessageTextContainer._typingTimer;
                            }
                            if (isKeyboardOpen) {
                                keepLatestMessageVisible(true);
                                setChatScrollLock(true);
                            } else {
                                keepLatestMessageVisible(false);
                            }
                        }
                    }

                    // Assistant message (streaming)
                    if (evt.message && typeof evt.message.content === 'string') {
                        // On assistant response, hide download overlay if visible
                        await hideDownloadOverlayAndWait();
                        fullMessage += evt.message.content;
                        if (!isSmallViewport) {
                            receivedMessageTextContainer.innerHTML = errorNoticesHtml + convertMarkdownToHTML(fullMessage);
                            if (receivedMessageTextContainer._typingTimer) {
                                clearInterval(receivedMessageTextContainer._typingTimer);
                                delete receivedMessageTextContainer._typingTimer;
                            }
                            if (isKeyboardOpen) {
                                keepLatestMessageVisible(true);
                                setChatScrollLock(true);
                            } else {
                                keepLatestMessageVisible(false);
                            }
                        }
                    }

                    if (evt.id && isNumeric(evt.id)) {
                        show_chat_popup(evt);
                    }

                    if (evt.uci_notify && !is_notify) {
                        show_notify_popup(evt);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                        is_notify = true;
                    }
                }
            }

            // For single-response (one JSON), try parsing the remaining buffer
            const trimmed = (buffer || '').trim();
            if (trimmed.startsWith('{') && trimmed.endsWith('}')) {
                try {
                    const evt = JSON.parse(trimmed);

                    // Tool execution notice (single JSON)
                    if (evt && Array.isArray(evt.tool_outputs)) {
                        const hasService = (typeof evt.service === 'string' && evt.service.length > 0);
                        const hasOutputs = (evt.tool_outputs.length > 0);
                        const allValid = hasOutputs && evt.tool_outputs.every(o => ('output' in o));

                        const names = hasOutputs
                            ? Array.from(new Set(
                                evt.tool_outputs
                                    .map(o => (typeof o.name === 'string' && o.name.length > 0) ? o.name : null)
                                    .filter(Boolean)
                            ))
                            : [];
                        const toolNamesLabel = names.length ? names.join(', ') : '(unknown)';

                        if (hasService && allValid) {
                            toolNoticesHtml += `<div class=\"tool-notice\">Tool used: <span class=\"tool-name\">${escapeHTML(toolNamesLabel)}</span></div>`;
                            if (!toolNoticeShown) {
                                const iconPath = `${resourcePath}/oasis/${icon_name}`;
                                const msgDiv = document.createElement('div');
                                msgDiv.className = 'message received';
                                const iconDiv = document.createElement('div');
                                iconDiv.className = 'icon';
                                iconDiv.style.backgroundImage = `url(${iconPath})`;
                                const textDiv = document.createElement('div');
                                textDiv.className = 'message-text chat-bubble';
                                textDiv.innerHTML = toolNoticesHtml;
                                msgDiv.appendChild(iconDiv);
                                msgDiv.appendChild(textDiv);
                                const chatRoot = document.querySelector('.chat-messages');
                                if (chatRoot) chatRoot.appendChild(msgDiv);
                                toolNoticeShown = true;
                                toolNoticeMessageDiv = msgDiv;
                                if (isKeyboardOpen) {
                                    keepLatestMessageVisible(true);
                                    setChatScrollLock(true);
                                } else {
                                    keepLatestMessageVisible(false);
                                }
                            }
                        } else {
                            const missing = [];
                            if (!hasService) missing.push('service');
                            if (!hasOutputs) missing.push('tool_outputs');
                            else if (!allValid) missing.push('tool_outputs[*].output');
                            errorNoticesHtml += `<div class=\"error-notice\">Invalid tool response: missing ${escapeHTML(missing.join(', '))}</div>`;
                        }
                    }

                    if (evt && typeof evt.type === 'string') {
                        if (evt.type === 'execution') {
                            if (evt.message) showToolExecutionNotice(evt.message);
                        } else if (evt.type === 'download') {
                            showDownloadOverlay(evt.message || 'Downloading...');
                        }
                    }

                    if (evt.message && typeof evt.message.content === 'string') {
                        await hideDownloadOverlayAndWait();
                        fullMessage += evt.message.content;
                    }
                    if (evt.id && isNumeric(evt.id)) {
                        show_chat_popup(evt);
                    }
                    if (evt.uci_notify && !is_notify) {
                        show_notify_popup(evt);
                    }
                } catch (_) {
                    // Ignore: the final fragment may be incomplete
                }
            }

            // Final output
            const __hasToolNotice = !!(toolNoticesHtml && toolNoticesHtml.length > 0);
            const __hasErrorNotice = !!(errorNoticesHtml && errorNoticesHtml.length > 0);
            const __finalText = (fullMessage || '').trim();
            if (!__hasToolNotice && !__hasErrorNotice && __finalText.length === 0) {
                receivedMessageTextContainer.innerHTML = sanitizeHTML(convertMarkdownToHTML('No response from AI service. Please check settings.'));
            } else {
                // Render only errors + assistant content. Tool notice is shown in a separate bubble.
                receivedMessageTextContainer.innerHTML = errorNoticesHtml + sanitizeHTML(convertMarkdownToHTML(__finalText));
            }
            if (receivedMessageTextContainer._typingTimer) {
                clearInterval(receivedMessageTextContainer._typingTimer);
                delete receivedMessageTextContainer._typingTimer;
            }
            if (isSmallViewport) {
                keepLatestMessageVisible(true);
            } else {
                if (isKeyboardOpen) {
                    keepLatestMessageVisible(true);
                } else {
                    keepLatestMessageVisible(false);
                }
            }
        } catch (error) {
            console.error('Request failed', error);
            receivedMessageTextContainer.innerHTML = sanitizeHTML(convertMarkdownToHTML('A network error occurred. Please check your network connection and AI service settings.'));
        } finally {
            message_outputing = false;
            activeConversation = false;
            setChatScrollLock(false);
            currentAssistantMessageDiv = null;
        }
    }

    function handleChatItemClick(chatId) {

        //console.log("chat id = " + chatId);

        if (activeConversation) {
            return;
        }

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }

        fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({ params: chatId })
        })
        .then(response => response.json())
        .then(data => {

            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if (data.messages && Array.isArray(data.messages)) {
                data.messages.forEach(message => {
                    const messageDiv = document.createElement('div');
                    const messageTextDiv = document.createElement('div');

                    if (message.role === 'user') {
                        messageDiv.className = 'message sent';
                    } else if (message.role === 'assistant') {
                        messageDiv.className = 'message received';

                        const iconPath = `${resourcePath}/oasis/${icon_name}`;
                        const iconDiv = document.createElement('div');
                        iconDiv.className = 'icon';
                        iconDiv.style.backgroundImage = `url(${iconPath})`;

                        messageDiv.appendChild(iconDiv);
                    }

                    if (message.role === 'user' || message.role === 'assistant') {
                        messageTextDiv.className = 'message-text';
                        message.content = sanitizeHTML(convertMarkdownToHTML(message.content));
                        messageTextDiv.innerHTML = message.content;
                        //messageTextDiv.textContent = message.content;

                        messageDiv.appendChild(messageTextDiv);

                        chatMessagesContainer.appendChild(messageDiv);
                    }
                });
                // Scroll to the latest message after history is rendered
                keepLatestMessageVisible(true);
            } 
            
            //else {
            //    console.error("Unexpected data format:", data);
            //}
        })
        .catch(error => {
            console.error('Error:', error);
        });
        targetChatId = chatId;
        // Lock System Message selection once a chat is active
        const sysmsgSelect = document.getElementById('sysmsg-select');
        const inlineSys = document.getElementById('inline-sysmsg-select');
        if (sysmsgSelect) sysmsgSelect.disabled = true;
        if (inlineSys) inlineSys.disabled = true;
    }

    async function new_chat_action() {
        if (activeConversation || message_outputing) {
            return;
        }

        targetChatId = "";
        // Re-enable System Message selection only for new chat
        const sysmsgSelect = document.getElementById('sysmsg-select');
        const inlineSys = document.getElementById('inline-sysmsg-select');
        if (sysmsgSelect) sysmsgSelect.disabled = false;
        if (inlineSys) inlineSys.disabled = false;
        // Sync mirrors (inline/mobile) with desktop state
        if (typeof updateMobileBottomSheetFromDesktop === 'function') {
            updateMobileBottomSheetFromDesktop();
        }

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const systemMessage = document.getElementById("oasis-system");
            if (systemMessage !== null) {
                chatMessagesContainer.removeChild(systemMessage);
            }
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }
    }

    (function(){
        const smpNewButton = document.getElementById('smp-new-button');
        if (smpNewButton) {
            smpNewButton.addEventListener('click', async function() {
                await new_chat_action();
            });
        }
    })();

    document.getElementById('new-button').addEventListener('click', async function() {
        await new_chat_action();
    });

    document.getElementById('import-chat-data').addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {

                const base64Data = e.target.result.split(",")[1];
 
                fetch('<%=build_url("admin", "network", "oasis", "import-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ chat_data: base64Data })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        alert("Unexpected data format");
                        return;
                    }

                    // Reflect the added chat in the list (common function)
                    const importedTitle = (data.title && String(data.title).length) ? data.title : '--';
                    addChatListEntry(data.id, importedTitle);

                    const itemCount = (chatList !== null) ? chatList.item.length : 0;
                    if (itemCount === 0) {
                        chatList = { item:[] };  
                    }
                    chatList.item.push({id: data.id, title: importedTitle});
                    // Refresh mobile bottom sheet list after import
                    if (typeof window.updateMobileBottomSheetFromDesktop === 'function') {
                        window.updateMobileBottomSheetFromDesktop();
                        const mbList = document.getElementById('mb-chat-list');
                        if (mbList && mbList.lastElementChild) {
                            mbList.lastElementChild.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                        }
                        const sheetContent = document.querySelector('#mobile-bottom-sheet .sheet-content');
                        const sheet = document.getElementById('mobile-bottom-sheet');
                        if (sheet && sheet.classList.contains('show') && sheetContent) {
                            sheetContent.scrollTop = sheetContent.scrollHeight;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            };
            reader.readAsDataURL(file);
        }
    });


    const smpImportInput = document.getElementById('smp-import-chat-data');
    if (smpImportInput) smpImportInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {

                const base64Data = e.target.result.split(",")[1];
 
                fetch('<%=build_url("admin", "network", "oasis", "import-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ chat_data: base64Data })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        alert("Unexpected data format");
                        return;
                    }

                    // Reflect the added chat in the list (common function)
                    const importedTitle = (data.title && String(data.title).length) ? data.title : '--';
                    addChatListEntry(data.id, importedTitle);

                    const itemCount = (chatList !== null) ? chatList.item.length : 0;
                    if (itemCount === 0) {
                        chatList = { item:[] };  
                    }
                    chatList.item.push({id: data.id, title: importedTitle});
                    // Refresh mobile bottom sheet list after import (from sheet)
                    if (typeof window.updateMobileBottomSheetFromDesktop === 'function') {
                        window.updateMobileBottomSheetFromDesktop();
                        const mbList = document.getElementById('mb-chat-list');
                        if (mbList && mbList.lastElementChild) {
                            mbList.lastElementChild.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                        }
                        const sheetContent = document.querySelector('#mobile-bottom-sheet .sheet-content');
                        const sheet = document.getElementById('mobile-bottom-sheet');
                        if (sheet && sheet.classList.contains('show') && sheetContent) {
                            sheetContent.scrollTop = sheetContent.scrollHeight;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            };
            reader.readAsDataURL(file);
        }
    });

    document.getElementById("ai-service-list").addEventListener("change", function(event) {
      const selected_service_index = parseInt(event.target.value, 10);
      const current_service = ai_service_list[selected_service_index];

      if (current_service) {

        fetch('<%=build_url("admin", "network", "oasis", "select-ai-service")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams(
            {
                identifier: current_service.identifier,
                name: current_service.name,
                model: current_service.model
            }),
        })
        .then(response => {
          if (!response.ok) throw new Error('Transmission failure');
          return response.json();
        })
        .then(data => {
        })
        .catch(error => {
          console.error('Error:', error);
        });
      }
    });
</script>

<%+footer%>
