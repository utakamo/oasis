<%+header%>

<style>
    /* Layout */
    .rollback-list { max-width: 800px; margin: 0 auto; }
    .rollback-card { background: #fff; border-radius: 12px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.06); padding: 16px 20px; margin-bottom: 22px; color: #333 }
    .text-box { margin-top: 5px; margin-bottom: 12px; border-left: 4px solid #FFA500; padding-left: 12px; }

    /* Unified buttons (aligned with chat/sysmsg) */
    .add-button, .load-button, .update-button, .delete-button, .cancel-button {
        display: inline-block;
        padding: 0 14px;
        width: 7.5rem;
        height: 2.5rem;
        line-height: 2.5rem;
        color: #ffffff;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        font-weight: 600;
    }
    .add-button, .load-button { background: linear-gradient(180deg, #2a84ff 0%, #0d6efd 100%); }
    .update-button { background: linear-gradient(180deg, #ff5bbd 0%, #ff1493 100%); }
    .delete-button, .cancel-button { background: linear-gradient(180deg, #9aa0a6 0%, #80868b 100%); }
    .add-button:active, .load-button:active, .update-button:active, .delete-button:active, .cancel-button:active { transform: translateY(1px); }

    .form-actions { margin: 10px 0; display:flex; gap:10px; flex-wrap: wrap; }

    /* Toast */
    .toast { position: sticky; top: 8px; background:#212529; color:#fff; padding:10px 12px; border-radius:8px; margin-bottom:8px; display:none; z-index: 10; }
    .toast.show { display:block; }
    .toast.success { background:#198754; }
    .toast.error { background:#dc3545; }
    .toast.info { background:#0d6efd; }

    /* Confirm dialog */
    .confirm-modal { position: fixed; inset: 0; display: none; align-items: center; justify-content: center; z-index: 1300; }
    .confirm-modal.show { display: flex; }
    .confirm-card { background: #ffffff; border-radius: 12px; box-shadow: 0 10px 30px rgba(0,0,0,0.15); padding: 18px 20px; width: min(92vw, 420px); }
    .confirm-card p { margin: 0 0 12px; font-weight: 600; text-align: center; font-size: 1.1rem; }
    .confirm-card .form-actions { justify-content: center; gap: 12px; width: 100%; }

    /* Overlay message + animation */
    #loadingOverlay .overlay-content { display: flex; flex-direction: column; align-items: center; gap: 14px; padding: 0 16px; }
    #loadingOverlay .overlay-message { font-size: 16px; line-height: 1.5; text-align: center; }
    #loadingOverlay .overlay-message .dots { display: inline-flex; gap: 2px; margin-left: 2px; }
    #loadingOverlay .overlay-message .dots span { opacity: 0.2; animation: dots-blink 1.2s infinite; }
    #loadingOverlay .overlay-message .dots span:nth-child(2) { animation-delay: 0.2s; }
    #loadingOverlay .overlay-message .dots span:nth-child(3) { animation-delay: 0.4s; }
    @keyframes dots-blink { 0% { opacity: 0.2; } 50% { opacity: 1; } 100% { opacity: 0.2; } }

    #loadingOverlay .overlay-progress { position: relative; width: 280px; max-width: 70vw; height: 4px; background: rgba(255,255,255,0.35); border-radius: 999px; overflow: hidden; }
    #loadingOverlay .overlay-progress::before { content: ""; position: absolute; left: -40%; top: 0; height: 100%; width: 40%; background: rgba(255,255,255,0.9); border-radius: inherit; animation: indeterminate-slide 1.2s linear infinite; }
    @keyframes indeterminate-slide { 0% { transform: translateX(0); } 100% { transform: translateX(350%); } }

    @media (prefers-reduced-motion: reduce) {
        #loadingOverlay .overlay-message .dots span { animation: none; opacity: 0.4; }
        #loadingOverlay .overlay-progress::before { animation: none; left: 0; width: 100%; opacity: 0.35; }
    }
</style>

<div id="loadingOverlay" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background-color: rgba(0,0,0,0.6); z-index:1000; color:white; font-weight:600; justify-content:center; align-items:center; text-align:center;">
    <div class="overlay-content">
        <div class="overlay-message">
            Rollback has been executed. You can access the UI again once the system has fully restarted
            <span class="dots"><span>.</span><span>.</span><span>.</span></span>
        </div>
        <div class="overlay-progress"></div>
    </div>
</div>

<div id="rollback-toast" role="status" aria-live="polite" class="toast" aria-atomic="true"></div>

<div class="rollback-list" id="rollbackContainer"></div>

<!-- Confirm modal -->
<div id="rollback-confirm" class="confirm-modal" role="dialog" aria-modal="true" aria-hidden="true">
  <div class="confirm-card">
    <p>Would you like to execute the rollback?</p>
    <div class="form-actions">
        <button type="button" class="load-button" id="confirmOk">Yes</button>
        <button type="button" class="delete-button" id="confirmCancel">No</button>
    </div>
  </div>
</div>

<script>
    const container = document.getElementById('rollbackContainer');
    const confirmModal = document.getElementById('rollback-confirm');
    const confirmOk = document.getElementById('confirmOk');
    const confirmCancel = document.getElementById('confirmCancel');
    const toastEl = document.getElementById('rollback-toast');

    function showToast(message, type = 'info', timeout = 2000) {
        if (!toastEl) return;
        toastEl.textContent = message;
        toastEl.className = `toast show ${type}`;
        setTimeout(() => { toastEl.className = 'toast'; toastEl.textContent = ''; }, timeout);
    }

    let currentRollbackId = null;
    let currentButton = null;

    function renderRollbackData(rollbackData) {
        container.innerHTML = '';

        const card = document.createElement('div');
        card.className = 'rollback-card';

        const reversedData = rollbackData.slice().reverse();

        reversedData.forEach((entry, index) => {
            const textBox = document.createElement('div');
            textBox.className = 'text-box';
            textBox.style.whiteSpace = 'pre-wrap';
            textBox.textContent = entry.text;

            const button = document.createElement('button');
            button.className = 'rollback-button load-button';
            button.dataset.id = entry.id;
            button.textContent = 'Rollback';

            card.appendChild(textBox);
            card.appendChild(button);
        });

        container.appendChild(card);
    }

    fetch('<%=build_url("admin", "network", "oasis", "load-rollback-list")%>', {
        method: 'POST',
    })
    .then(response => response.json())
    .then(data => {
        const rollbackData = data.map((entry, index) => {
            let cmds = [];

            Object.keys(entry).forEach(cmdType => {
                const cmdList = entry[cmdType];
                if (Array.isArray(cmdList) && cmdList.length > 0) {
                    cmdList.forEach(item => {
                        if (item && typeof item.param === 'string' && item.param.length > 0) {
                            cmds.push(`uci ${cmdType} ${item.param}`);
                        }
                    });
                }
            });

            return {
                id: index + 1,
                text: cmds.length ? cmds.join('\n') : 'No UCI commands found.'
            };
        });

        renderRollbackData(rollbackData);
    })
    .catch(error => {
        container.innerHTML = '<p>No Rollback Data</p>';
    });

    function showLoadingOverlay(message) {
        const overlay = document.getElementById('loadingOverlay');
        overlay.querySelector('div').textContent = message || 'Loading...';
        overlay.style.display = 'flex';
    }

    function hideLoadingOverlay() {
        document.getElementById('loadingOverlay').style.display = 'none';
    }

    container.addEventListener('click', function (e) {
        if (e.target.classList.contains('rollback-button')) {
            currentRollbackId = e.target.dataset.id;
            currentButton = e.target;

            document.querySelectorAll('.rollback-button').forEach(btn => {
                btn.classList.remove('selected');
            });
            currentButton.classList.add('selected');

            confirmModal.classList.add('show');
            confirmModal.setAttribute('aria-hidden', 'false');
        }
    });

    confirmOk.onclick = function () {
        confirmModal.classList.remove('show');
        confirmModal.setAttribute('aria-hidden', 'true');

        // Replace content immediately with final instruction
        const finalMsg = 'Rollback has been executed. You can access the UI again once the system has fully restarted.';
        container.innerHTML = '';
        showLoadingOverlay(finalMsg);

        // Fire-and-forget: rollback will likely drop connection; we don't wait UI feedback
        fetch('<%=build_url("admin", "network", "oasis", "rollback-target-data")%>', { 
            method: "POST",
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({ index: currentRollbackId }),
        }).catch(error => {
            console.warn('Rollback may drop connection:', error);
        });
    };

    confirmCancel.onclick = function () {
        confirmModal.classList.remove('show');
        confirmModal.setAttribute('aria-hidden', 'true');
        if (currentButton) {
            currentButton.classList.remove('selected');
        }
    };
</script>
<%+footer%>